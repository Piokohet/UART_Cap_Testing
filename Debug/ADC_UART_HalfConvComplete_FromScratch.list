
ADC_UART_HalfConvComplete_FromScratch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005168  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001347c  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801877c  0801877c  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  0801877c  0801877c  0002877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018784  08018784  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018784  08018784  00028784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018788  08018788  00028788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0801878c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004994  20000070  080187fc  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20004a04  080187fc  00034a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0aa  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022dd  00000000  00000000  0003d14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0003f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0003fd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017010  00000000  00000000  000404f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca5d  00000000  00000000  00057508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e55  00000000  00000000  00063f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000f5dba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002300  00000000  00000000  000f5e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  000f817c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080052e8 	.word	0x080052e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080052e8 	.word	0x080052e8

080001d8 <arm_bitreversal_32>:
 80001d8:	1c4b      	adds	r3, r1, #1
 80001da:	2b01      	cmp	r3, #1
 80001dc:	bf98      	it	ls
 80001de:	4770      	bxls	lr
 80001e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001e4:	1c91      	adds	r1, r2, #2
 80001e6:	089b      	lsrs	r3, r3, #2

080001e8 <arm_bitreversal_32_0>:
 80001e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f0:	880a      	ldrh	r2, [r1, #0]
 80001f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001f6:	4480      	add	r8, r0
 80001f8:	4481      	add	r9, r0
 80001fa:	4402      	add	r2, r0
 80001fc:	4484      	add	ip, r0
 80001fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000202:	f8d8 6000 	ldr.w	r6, [r8]
 8000206:	6815      	ldr	r5, [r2, #0]
 8000208:	f8dc 4000 	ldr.w	r4, [ip]
 800020c:	f8c9 6000 	str.w	r6, [r9]
 8000210:	f8c8 7000 	str.w	r7, [r8]
 8000214:	f8cc 5000 	str.w	r5, [ip]
 8000218:	6014      	str	r4, [r2, #0]
 800021a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800021e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000222:	6855      	ldr	r5, [r2, #4]
 8000224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000228:	f8c9 6004 	str.w	r6, [r9, #4]
 800022c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000230:	f8cc 5004 	str.w	r5, [ip, #4]
 8000234:	6054      	str	r4, [r2, #4]
 8000236:	3108      	adds	r1, #8
 8000238:	3b01      	subs	r3, #1
 800023a:	d1d5      	bne.n	80001e8 <arm_bitreversal_32_0>
 800023c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000240:	4770      	bx	lr

08000242 <arm_bitreversal_16>:
 8000242:	1c4b      	adds	r3, r1, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	bf98      	it	ls
 8000248:	4770      	bxls	lr
 800024a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024e:	1c91      	adds	r1, r2, #2
 8000250:	089b      	lsrs	r3, r3, #2

08000252 <arm_bitreversal_16_0>:
 8000252:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000256:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800025a:	880a      	ldrh	r2, [r1, #0]
 800025c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000260:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000264:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000268:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800026c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000270:	f8d9 7000 	ldr.w	r7, [r9]
 8000274:	f8d8 6000 	ldr.w	r6, [r8]
 8000278:	6815      	ldr	r5, [r2, #0]
 800027a:	f8dc 4000 	ldr.w	r4, [ip]
 800027e:	f8c9 6000 	str.w	r6, [r9]
 8000282:	f8c8 7000 	str.w	r7, [r8]
 8000286:	f8cc 5000 	str.w	r5, [ip]
 800028a:	6014      	str	r4, [r2, #0]
 800028c:	3108      	adds	r1, #8
 800028e:	3b01      	subs	r3, #1
 8000290:	d1df      	bne.n	8000252 <arm_bitreversal_16_0>
 8000292:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	4770      	bx	lr

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b974 	b.w	8000598 <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002cc:	9d08      	ldr	r5, [sp, #32]
 80002ce:	4604      	mov	r4, r0
 80002d0:	468e      	mov	lr, r1
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d14d      	bne.n	8000372 <__udivmoddi4+0xaa>
 80002d6:	428a      	cmp	r2, r1
 80002d8:	4694      	mov	ip, r2
 80002da:	d969      	bls.n	80003b0 <__udivmoddi4+0xe8>
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	b152      	cbz	r2, 80002f8 <__udivmoddi4+0x30>
 80002e2:	fa01 f302 	lsl.w	r3, r1, r2
 80002e6:	f1c2 0120 	rsb	r1, r2, #32
 80002ea:	fa20 f101 	lsr.w	r1, r0, r1
 80002ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f2:	ea41 0e03 	orr.w	lr, r1, r3
 80002f6:	4094      	lsls	r4, r2
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	0c21      	lsrs	r1, r4, #16
 80002fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000302:	fa1f f78c 	uxth.w	r7, ip
 8000306:	fb08 e316 	mls	r3, r8, r6, lr
 800030a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800030e:	fb06 f107 	mul.w	r1, r6, r7
 8000312:	4299      	cmp	r1, r3
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x64>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f106 30ff 	add.w	r0, r6, #4294967295
 800031e:	f080 811f 	bcs.w	8000560 <__udivmoddi4+0x298>
 8000322:	4299      	cmp	r1, r3
 8000324:	f240 811c 	bls.w	8000560 <__udivmoddi4+0x298>
 8000328:	3e02      	subs	r6, #2
 800032a:	4463      	add	r3, ip
 800032c:	1a5b      	subs	r3, r3, r1
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb3 f0f8 	udiv	r0, r3, r8
 8000334:	fb08 3310 	mls	r3, r8, r0, r3
 8000338:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033c:	fb00 f707 	mul.w	r7, r0, r7
 8000340:	42a7      	cmp	r7, r4
 8000342:	d90a      	bls.n	800035a <__udivmoddi4+0x92>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 33ff 	add.w	r3, r0, #4294967295
 800034c:	f080 810a 	bcs.w	8000564 <__udivmoddi4+0x29c>
 8000350:	42a7      	cmp	r7, r4
 8000352:	f240 8107 	bls.w	8000564 <__udivmoddi4+0x29c>
 8000356:	4464      	add	r4, ip
 8000358:	3802      	subs	r0, #2
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	1be4      	subs	r4, r4, r7
 8000360:	2600      	movs	r6, #0
 8000362:	b11d      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000364:	40d4      	lsrs	r4, r2
 8000366:	2300      	movs	r3, #0
 8000368:	e9c5 4300 	strd	r4, r3, [r5]
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	428b      	cmp	r3, r1
 8000374:	d909      	bls.n	800038a <__udivmoddi4+0xc2>
 8000376:	2d00      	cmp	r5, #0
 8000378:	f000 80ef 	beq.w	800055a <__udivmoddi4+0x292>
 800037c:	2600      	movs	r6, #0
 800037e:	e9c5 0100 	strd	r0, r1, [r5]
 8000382:	4630      	mov	r0, r6
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	fab3 f683 	clz	r6, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d14a      	bne.n	8000428 <__udivmoddi4+0x160>
 8000392:	428b      	cmp	r3, r1
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xd4>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80f9 	bhi.w	800058e <__udivmoddi4+0x2c6>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb61 0303 	sbc.w	r3, r1, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	469e      	mov	lr, r3
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e0      	beq.n	800036c <__udivmoddi4+0xa4>
 80003aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ae:	e7dd      	b.n	800036c <__udivmoddi4+0xa4>
 80003b0:	b902      	cbnz	r2, 80003b4 <__udivmoddi4+0xec>
 80003b2:	deff      	udf	#255	; 0xff
 80003b4:	fab2 f282 	clz	r2, r2
 80003b8:	2a00      	cmp	r2, #0
 80003ba:	f040 8092 	bne.w	80004e2 <__udivmoddi4+0x21a>
 80003be:	eba1 010c 	sub.w	r1, r1, ip
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2601      	movs	r6, #1
 80003cc:	0c20      	lsrs	r0, r4, #16
 80003ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80003d2:	fb07 1113 	mls	r1, r7, r3, r1
 80003d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003da:	fb0e f003 	mul.w	r0, lr, r3
 80003de:	4288      	cmp	r0, r1
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x12c>
 80003e2:	eb1c 0101 	adds.w	r1, ip, r1
 80003e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x12a>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 80003f2:	4643      	mov	r3, r8
 80003f4:	1a09      	subs	r1, r1, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000400:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x156>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 31ff 	add.w	r1, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x154>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2ca>
 800041c:	4608      	mov	r0, r1
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000426:	e79c      	b.n	8000362 <__udivmoddi4+0x9a>
 8000428:	f1c6 0720 	rsb	r7, r6, #32
 800042c:	40b3      	lsls	r3, r6
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa20 f407 	lsr.w	r4, r0, r7
 800043a:	fa01 f306 	lsl.w	r3, r1, r6
 800043e:	431c      	orrs	r4, r3
 8000440:	40f9      	lsrs	r1, r7
 8000442:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000446:	fa00 f306 	lsl.w	r3, r0, r6
 800044a:	fbb1 f8f9 	udiv	r8, r1, r9
 800044e:	0c20      	lsrs	r0, r4, #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fb09 1118 	mls	r1, r9, r8, r1
 8000458:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800045c:	fb08 f00e 	mul.w	r0, r8, lr
 8000460:	4288      	cmp	r0, r1
 8000462:	fa02 f206 	lsl.w	r2, r2, r6
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000468:	eb1c 0101 	adds.w	r1, ip, r1
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2bc>
 8000474:	4288      	cmp	r0, r1
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2bc>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4461      	add	r1, ip
 8000480:	1a09      	subs	r1, r1, r0
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb1 f0f9 	udiv	r0, r1, r9
 8000488:	fb09 1110 	mls	r1, r9, r0, r1
 800048c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000490:	fb00 fe0e 	mul.w	lr, r0, lr
 8000494:	458e      	cmp	lr, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1e2>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2b4>
 80004a2:	458e      	cmp	lr, r1
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2b4>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ae:	fba0 9402 	umull	r9, r4, r0, r2
 80004b2:	eba1 010e 	sub.w	r1, r1, lr
 80004b6:	42a1      	cmp	r1, r4
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46a6      	mov	lr, r4
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x2a4>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x2a0>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x212>
 80004c2:	ebb3 0208 	subs.w	r2, r3, r8
 80004c6:	eb61 010e 	sbc.w	r1, r1, lr
 80004ca:	fa01 f707 	lsl.w	r7, r1, r7
 80004ce:	fa22 f306 	lsr.w	r3, r2, r6
 80004d2:	40f1      	lsrs	r1, r6
 80004d4:	431f      	orrs	r7, r3
 80004d6:	e9c5 7100 	strd	r7, r1, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	40d8      	lsrs	r0, r3
 80004e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ec:	fa21 f303 	lsr.w	r3, r1, r3
 80004f0:	4091      	lsls	r1, r2
 80004f2:	4301      	orrs	r1, r0
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000500:	fb07 3610 	mls	r6, r7, r0, r3
 8000504:	0c0b      	lsrs	r3, r1, #16
 8000506:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800050a:	fb00 f60e 	mul.w	r6, r0, lr
 800050e:	429e      	cmp	r6, r3
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x260>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b8>
 8000520:	429e      	cmp	r6, r3
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b8>
 8000524:	3802      	subs	r0, #2
 8000526:	4463      	add	r3, ip
 8000528:	1b9b      	subs	r3, r3, r6
 800052a:	b289      	uxth	r1, r1
 800052c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000530:	fb07 3316 	mls	r3, r7, r6, r3
 8000534:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000538:	fb06 f30e 	mul.w	r3, r6, lr
 800053c:	428b      	cmp	r3, r1
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x28a>
 8000540:	eb1c 0101 	adds.w	r1, ip, r1
 8000544:	f106 38ff 	add.w	r8, r6, #4294967295
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2b0>
 800054a:	428b      	cmp	r3, r1
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2b0>
 800054e:	3e02      	subs	r6, #2
 8000550:	4461      	add	r1, ip
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0x104>
 800055a:	462e      	mov	r6, r5
 800055c:	4628      	mov	r0, r5
 800055e:	e705      	b.n	800036c <__udivmoddi4+0xa4>
 8000560:	4606      	mov	r6, r0
 8000562:	e6e3      	b.n	800032c <__udivmoddi4+0x64>
 8000564:	4618      	mov	r0, r3
 8000566:	e6f8      	b.n	800035a <__udivmoddi4+0x92>
 8000568:	454b      	cmp	r3, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f8>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000574:	3801      	subs	r0, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f8>
 8000578:	4646      	mov	r6, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x28a>
 800057c:	4620      	mov	r0, r4
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1e2>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x260>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b8>
 8000588:	3b02      	subs	r3, #2
 800058a:	4461      	add	r1, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x12c>
 800058e:	4630      	mov	r0, r6
 8000590:	e709      	b.n	80003a6 <__udivmoddi4+0xde>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x156>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005b0:	4a22      	ldr	r2, [pc, #136]	; (800063c <MX_ADC1_Init+0xa0>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005bc:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005e0:	4a17      	ldr	r2, [pc, #92]	; (8000640 <MX_ADC1_Init+0xa4>)
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_ADC1_Init+0x9c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fe:	480e      	ldr	r0, [pc, #56]	; (8000638 <MX_ADC1_Init+0x9c>)
 8000600:	f000 fd08 	bl	8001014 <HAL_ADC_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800060a:	f000 fb27 	bl	8000c5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800060e:	230a      	movs	r3, #10
 8000610:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000616:	2307      	movs	r3, #7
 8000618:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_ADC1_Init+0x9c>)
 8000620:	f000 fe40 	bl	80012a4 <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800062a:	f000 fb17 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000008c 	.word	0x2000008c
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	; 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a2e      	ldr	r2, [pc, #184]	; (800071c <HAL_ADC_MspInit+0xd8>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d155      	bne.n	8000712 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	4a2c      	ldr	r2, [pc, #176]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 8000670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000674:	6453      	str	r3, [r2, #68]	; 0x44
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <HAL_ADC_MspInit+0xdc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <HAL_ADC_MspInit+0xe0>)
 80006b2:	f001 fdbb 	bl	800222c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006b8:	4a1c      	ldr	r2, [pc, #112]	; (800072c <HAL_ADC_MspInit+0xe8>)
 80006ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f6:	480c      	ldr	r0, [pc, #48]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 80006f8:	f001 f996 	bl	8001a28 <HAL_DMA_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000702:	f000 faab 	bl	8000c5c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 800070a:	639a      	str	r2, [r3, #56]	; 0x38
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_ADC_MspInit+0xe4>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40012000 	.word	0x40012000
 8000720:	40023800 	.word	0x40023800
 8000724:	40020800 	.word	0x40020800
 8000728:	200000d4 	.word	0x200000d4
 800072c:	40026410 	.word	0x40026410

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_DMA_Init+0x68>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <MX_DMA_Init+0x68>)
 8000740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_DMA_Init+0x68>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_DMA_Init+0x68>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <MX_DMA_Init+0x68>)
 800075c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_DMA_Init+0x68>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	2011      	movs	r0, #17
 8000774:	f001 f921 	bl	80019ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000778:	2011      	movs	r0, #17
 800077a:	f001 f93a 	bl	80019f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	2038      	movs	r0, #56	; 0x38
 8000784:	f001 f919 	bl	80019ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000788:	2038      	movs	r0, #56	; 0x38
 800078a:	f001 f932 	bl	80019f2 <HAL_NVIC_EnableIRQ>

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800

0800079c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <MX_GPIO_Init+0x114>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <MX_GPIO_Init+0x114>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <MX_GPIO_Init+0x114>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b37      	ldr	r3, [pc, #220]	; (80008b0 <MX_GPIO_Init+0x114>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a36      	ldr	r2, [pc, #216]	; (80008b0 <MX_GPIO_Init+0x114>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <MX_GPIO_Init+0x114>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <MX_GPIO_Init+0x114>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2f      	ldr	r2, [pc, #188]	; (80008b0 <MX_GPIO_Init+0x114>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_GPIO_Init+0x114>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_GPIO_Init+0x114>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a28      	ldr	r2, [pc, #160]	; (80008b0 <MX_GPIO_Init+0x114>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_GPIO_Init+0x114>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OSCI_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2130      	movs	r1, #48	; 0x30
 8000826:	4823      	ldr	r0, [pc, #140]	; (80008b4 <MX_GPIO_Init+0x118>)
 8000828:	f001 fe84 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OSCI2_GPIO_Port, OSCI2_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2101      	movs	r1, #1
 8000830:	4821      	ldr	r0, [pc, #132]	; (80008b8 <MX_GPIO_Init+0x11c>)
 8000832:	f001 fe7f 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	481b      	ldr	r0, [pc, #108]	; (80008bc <MX_GPIO_Init+0x120>)
 800084e:	f001 fced 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OSCI_Pin;
 8000852:	2310      	movs	r3, #16
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OSCI_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4812      	ldr	r0, [pc, #72]	; (80008b4 <MX_GPIO_Init+0x118>)
 800086a:	f001 fcdf 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086e:	2320      	movs	r3, #32
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <MX_GPIO_Init+0x118>)
 8000886:	f001 fcd1 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OSCI2_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OSCI2_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_GPIO_Init+0x11c>)
 80008a2:	f001 fcc3 	bl	800222c <HAL_GPIO_Init>

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40020800 	.word	0x40020800

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f000 fb33 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f841 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f7ff ff65 	bl	800079c <MX_GPIO_Init>
  MX_DMA_Init();
 80008d2:	f7ff ff2d 	bl	8000730 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008d6:	f000 fa55 	bl	8000d84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008da:	f7ff fe5f 	bl	800059c <MX_ADC1_Init>
	  for(i = 0; i < EIGHTBIT; i++){
	  	  val[n*EIGHTBIT + i] = i;
	  }
  }
  */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*) val, ARRAYLEN);
 80008de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008e2:	4916      	ldr	r1, [pc, #88]	; (800093c <main+0x7c>)
 80008e4:	4816      	ldr	r0, [pc, #88]	; (8000940 <main+0x80>)
 80008e6:	f000 fbd9 	bl	800109c <HAL_ADC_Start_DMA>

  arm_rfft_fast_init_f32(&FFTHandler, ARRAYLEN);
 80008ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ee:	4815      	ldr	r0, [pc, #84]	; (8000944 <main+0x84>)
 80008f0:	f003 fb56 	bl	8003fa0 <arm_rfft_fast_init_f32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(SamplesReady == 1)
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <main+0x88>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d1fa      	bne.n	80008f4 <main+0x34>
	  {
		  SamplesReady = 0;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <main+0x88>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]

		  for(uint32_t i = 0; i < ARRAYLEN; i++)
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	e010      	b.n	800092c <main+0x6c>
		  {
			  FFTInBuffer[i] = (float) val[i];
 800090a:	4a0c      	ldr	r2, [pc, #48]	; (800093c <main+0x7c>)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	ee07 3a90 	vmov	s15, r3
 8000916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800091a:	4a0c      	ldr	r2, [pc, #48]	; (800094c <main+0x8c>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	edc3 7a00 	vstr	s15, [r3]
		  for(uint32_t i = 0; i < ARRAYLEN; i++)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3301      	adds	r3, #1
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000932:	d3ea      	bcc.n	800090a <main+0x4a>
		  }

		  CalculateFFT();
 8000934:	f000 f8ae 	bl	8000a94 <CalculateFFT>
	  if(SamplesReady == 1)
 8000938:	e7dc      	b.n	80008f4 <main+0x34>
 800093a:	bf00      	nop
 800093c:	20000134 	.word	0x20000134
 8000940:	2000008c 	.word	0x2000008c
 8000944:	20004934 	.word	0x20004934
 8000948:	2000494c 	.word	0x2000494c
 800094c:	20000934 	.word	0x20000934

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fb1c 	bl	8004f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <SystemClock_Config+0xc8>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a26      	ldr	r2, [pc, #152]	; (8000a18 <SystemClock_Config+0xc8>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <SystemClock_Config+0xc8>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <SystemClock_Config+0xcc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <SystemClock_Config+0xcc>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <SystemClock_Config+0xcc>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009c4:	2360      	movs	r3, #96	; 0x60
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009cc:	2304      	movs	r3, #4
 80009ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 0320 	add.w	r3, r7, #32
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fde1 	bl	800259c <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e0:	f000 f93c 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2302      	movs	r3, #2
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	2103      	movs	r1, #3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 f843 	bl	8002a8c <HAL_RCC_ClockConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a0c:	f000 f926 	bl	8000c5c <Error_Handler>
  }
}
 8000a10:	bf00      	nop
 8000a12:	3750      	adds	r7, #80	; 0x50
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == ADC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d108      	bne.n	8000a44 <HAL_ADC_ConvCpltCallback+0x24>
	{
		HAL_UART_Transmit_DMA(&huart2,(uint8_t*)val,ARRAYLEN);
 8000a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a36:	4906      	ldr	r1, [pc, #24]	; (8000a50 <HAL_ADC_ConvCpltCallback+0x30>)
 8000a38:	4806      	ldr	r0, [pc, #24]	; (8000a54 <HAL_ADC_ConvCpltCallback+0x34>)
 8000a3a:	f002 fa95 	bl	8002f68 <HAL_UART_Transmit_DMA>
		SamplesReady = 1;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_ADC_ConvCpltCallback+0x38>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
	}
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40012000 	.word	0x40012000
 8000a50:	20000134 	.word	0x20000134
 8000a54:	2000495c 	.word	0x2000495c
 8000a58:	2000494c 	.word	0x2000494c

08000a5c <complexABS>:

float complexABS(float real, float compl) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a66:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8000a6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a6e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000a72:	edd7 7a00 	vldr	s15, [r7]
 8000a76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a82:	f004 fac1 	bl	8005008 <sqrtf>
 8000a86:	eef0 7a40 	vmov.f32	s15, s0
}
 8000a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <CalculateFFT>:

void CalculateFFT(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
	arm_rfft_fast_f32(&FFTHandler, FFTInBuffer, FFTOutBuffer, 0);
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	4a6a      	ldr	r2, [pc, #424]	; (8000c4c <CalculateFFT+0x1b8>)
 8000aa2:	496b      	ldr	r1, [pc, #428]	; (8000c50 <CalculateFFT+0x1bc>)
 8000aa4:	486b      	ldr	r0, [pc, #428]	; (8000c54 <CalculateFFT+0x1c0>)
 8000aa6:	f003 faff 	bl	80040a8 <arm_rfft_fast_f32>

	int Freqs[ARRAYLEN];
	int FreqPoint = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000ab0:	f102 020c 	add.w	r2, r2, #12
 8000ab4:	6013      	str	r3, [r2, #0]
	int Offset = 45; //variable noise floor offset
 8000ab6:	232d      	movs	r3, #45	; 0x2d
 8000ab8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000abc:	f102 0204 	add.w	r2, r2, #4
 8000ac0:	6013      	str	r3, [r2, #0]

	//calculate abs values and linear-to-dB
	for (int i = 0; i < ARRAYLEN; i = i+2)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000ac8:	f102 0208 	add.w	r2, r2, #8
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e06d      	b.n	8000bac <CalculateFFT+0x118>
	{
		Freqs[FreqPoint] = (int)(20*log10f(complexABS(FFTOutBuffer[i], FFTOutBuffer[i+1]))) - Offset;
 8000ad0:	4a5e      	ldr	r2, [pc, #376]	; (8000c4c <CalculateFFT+0x1b8>)
 8000ad2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ad6:	f103 0308 	add.w	r3, r3, #8
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	edd3 7a00 	vldr	s15, [r3]
 8000ae4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ae8:	f103 0308 	add.w	r3, r3, #8
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a56      	ldr	r2, [pc, #344]	; (8000c4c <CalculateFFT+0x1b8>)
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	ed93 7a00 	vldr	s14, [r3]
 8000afa:	eef0 0a47 	vmov.f32	s1, s14
 8000afe:	eeb0 0a67 	vmov.f32	s0, s15
 8000b02:	f7ff ffab 	bl	8000a5c <complexABS>
 8000b06:	eef0 7a40 	vmov.f32	s15, s0
 8000b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0e:	f004 fa4d 	bl	8004fac <log10f>
 8000b12:	eef0 7a40 	vmov.f32	s15, s0
 8000b16:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b22:	ee17 2a90 	vmov	r2, s15
 8000b26:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b2a:	f103 0304 	add.w	r3, r3, #4
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	1ad2      	subs	r2, r2, r3
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4619      	mov	r1, r3
 8000b38:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b3c:	f103 030c 	add.w	r3, r3, #12
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	440b      	add	r3, r1
 8000b46:	f843 2c0c 	str.w	r2, [r3, #-12]

		if(Freqs[FreqPoint] < 0)
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b54:	f103 030c 	add.w	r3, r3, #12
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	da0c      	bge.n	8000b80 <CalculateFFT+0xec>
		{
			Freqs[FreqPoint] = 0;
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b70:	f103 030c 	add.w	r3, r3, #12
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f843 2c0c 	str.w	r2, [r3, #-12]
		}
		FreqPoint++;
 8000b80:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b84:	f103 030c 	add.w	r3, r3, #12
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000b90:	f102 020c 	add.w	r2, r2, #12
 8000b94:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < ARRAYLEN; i = i+2)
 8000b96:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b9a:	f103 0308 	add.w	r3, r3, #8
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000ba6:	f102 0208 	add.w	r2, r2, #8
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000bb0:	f103 0308 	add.w	r3, r3, #8
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bba:	db89      	blt.n	8000ad0 <CalculateFFT+0x3c>
	}

	OutFreqArray[0] = (uint8_t)Freqs[1]; // 22 Hz
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <CalculateFFT+0x1c4>)
 8000bc8:	701a      	strb	r2, [r3, #0]
	OutFreqArray[1] = (uint8_t)Freqs[3]; // 63 Hz
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <CalculateFFT+0x1c4>)
 8000bd4:	705a      	strb	r2, [r3, #1]
	OutFreqArray[2] = (uint8_t)Freqs[6]; // 125 Hz
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <CalculateFFT+0x1c4>)
 8000be0:	709a      	strb	r2, [r3, #2]
	OutFreqArray[3] = (uint8_t)Freqs[11]; // 250 Hz
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	6a1b      	ldr	r3, [r3, #32]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <CalculateFFT+0x1c4>)
 8000bec:	70da      	strb	r2, [r3, #3]
	OutFreqArray[4] = (uint8_t)Freqs[21]; // 500 Hz
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <CalculateFFT+0x1c4>)
 8000bf8:	711a      	strb	r2, [r3, #4]
	OutFreqArray[5] = (uint8_t)Freqs[42]; // 1000 Hz
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <CalculateFFT+0x1c4>)
 8000c06:	715a      	strb	r2, [r3, #5]
	OutFreqArray[6] = (uint8_t)Freqs[93]; // 2200 Hz
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <CalculateFFT+0x1c4>)
 8000c14:	719a      	strb	r2, [r3, #6]
	OutFreqArray[7] = (uint8_t)Freqs[189]; // 4500 Hz
 8000c16:	f107 0310 	add.w	r3, r7, #16
 8000c1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <CalculateFFT+0x1c4>)
 8000c22:	71da      	strb	r2, [r3, #7]
	OutFreqArray[8] = (uint8_t)Freqs[378]; // 9000 Hz
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	f8d3 35dc 	ldr.w	r3, [r3, #1500]	; 0x5dc
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <CalculateFFT+0x1c4>)
 8000c30:	721a      	strb	r2, [r3, #8]
	OutFreqArray[9] = (uint8_t)Freqs[630]; // 15000 Hz
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	f8d3 39cc 	ldr.w	r3, [r3, #2508]	; 0x9cc
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <CalculateFFT+0x1c4>)
 8000c3e:	725a      	strb	r2, [r3, #9]

}
 8000c40:	bf00      	nop
 8000c42:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20002934 	.word	0x20002934
 8000c50:	20000934 	.word	0x20000934
 8000c54:	20004934 	.word	0x20004934
 8000c58:	20004950 	.word	0x20004950

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca6:	2007      	movs	r0, #7
 8000ca8:	f000 fe7c 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f966 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <DMA1_Stream6_IRQHandler+0x18>)
 8000d12:	f001 f821 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */
  HAL_GPIO_TogglePin(OSCI_GPIO_Port, OSCI_Pin);
 8000d16:	2110      	movs	r1, #16
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <DMA1_Stream6_IRQHandler+0x1c>)
 8000d1a:	f001 fc24 	bl	8002566 <HAL_GPIO_TogglePin>
  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200049a0 	.word	0x200049a0
 8000d28:	40020000 	.word	0x40020000

08000d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <USART2_IRQHandler+0x10>)
 8000d32:	f002 f997 	bl	8003064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000495c 	.word	0x2000495c

08000d40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <DMA2_Stream0_IRQHandler+0x18>)
 8000d46:	f001 f807 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  HAL_GPIO_TogglePin(OSCI2_GPIO_Port,OSCI2_Pin);
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <DMA2_Stream0_IRQHandler+0x1c>)
 8000d4e:	f001 fc0a 	bl	8002566 <HAL_GPIO_TogglePin>
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000d4 	.word	0x200000d4
 8000d5c:	40020400 	.word	0x40020400

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <MX_USART2_UART_Init+0x50>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1843200;
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f44f 12e1 	mov.w	r2, #1843200	; 0x1c2000
 8000d94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	2208      	movs	r2, #8
 8000dac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	f002 f886 	bl	8002ecc <HAL_UART_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc6:	f7ff ff49 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000495c 	.word	0x2000495c
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a34      	ldr	r2, [pc, #208]	; (8000ec8 <HAL_UART_MspInit+0xf0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d161      	bne.n	8000ebe <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <HAL_UART_MspInit+0xf4>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a32      	ldr	r2, [pc, #200]	; (8000ecc <HAL_UART_MspInit+0xf4>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <HAL_UART_MspInit+0xf4>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <HAL_UART_MspInit+0xf4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a2b      	ldr	r2, [pc, #172]	; (8000ecc <HAL_UART_MspInit+0xf4>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <HAL_UART_MspInit+0xf4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e32:	230c      	movs	r3, #12
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e42:	2307      	movs	r3, #7
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4820      	ldr	r0, [pc, #128]	; (8000ed0 <HAL_UART_MspInit+0xf8>)
 8000e4e:	f001 f9ed 	bl	800222c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e52:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <HAL_UART_MspInit+0x100>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e62:	2240      	movs	r2, #64	; 0x40
 8000e64:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e72:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e92:	4810      	ldr	r0, [pc, #64]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000e94:	f000 fdc8 	bl	8001a28 <HAL_DMA_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000e9e:	f7ff fedd 	bl	8000c5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_UART_MspInit+0xfc>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2026      	movs	r0, #38	; 0x26
 8000eb4:	f000 fd81 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eb8:	2026      	movs	r0, #38	; 0x26
 8000eba:	f000 fd9a 	bl	80019f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	200049a0 	.word	0x200049a0
 8000ed8:	400260a0 	.word	0x400260a0

08000edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ee2:	490e      	ldr	r1, [pc, #56]	; (8000f1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef8:	4c0b      	ldr	r4, [pc, #44]	; (8000f28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f06:	f7ff ff2b 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f004 f823 	bl	8004f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0e:	f7ff fcd7 	bl	80008c0 <main>
  bx  lr    
 8000f12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f20:	0801878c 	.word	0x0801878c
  ldr r2, =_sbss
 8000f24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f28:	20004a04 	.word	0x20004a04

08000f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <HAL_Init+0x40>)
 8000f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_Init+0x40>)
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_Init+0x40>)
 8000f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 fd23 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f808 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff fe80 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023c00 	.word	0x40023c00

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fd3b 	bl	8001a0e <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 fd03 	bl	80019ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20004a00 	.word	0x20004a00

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20004a00 	.word	0x20004a00

08001014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e033      	b.n	8001092 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	2b00      	cmp	r3, #0
 8001030:	d109      	bne.n	8001046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fb06 	bl	8000644 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	2b00      	cmp	r3, #0
 8001050:	d118      	bne.n	8001084 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800105a:	f023 0302 	bic.w	r3, r3, #2
 800105e:	f043 0202 	orr.w	r2, r3, #2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fa4e 	bl	8001508 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f023 0303 	bic.w	r3, r3, #3
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
 8001082:	e001      	b.n	8001088 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_ADC_Start_DMA+0x1e>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e0ce      	b.n	8001258 <HAL_ADC_Start_DMA+0x1bc>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d018      	beq.n	8001102 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0201 	orr.w	r2, r2, #1
 80010de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010e0:	4b5f      	ldr	r3, [pc, #380]	; (8001260 <HAL_ADC_Start_DMA+0x1c4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a5f      	ldr	r2, [pc, #380]	; (8001264 <HAL_ADC_Start_DMA+0x1c8>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	0c9a      	lsrs	r2, r3, #18
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010f4:	e002      	b.n	80010fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f9      	bne.n	80010f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001110:	d107      	bne.n	8001122 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001120:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b01      	cmp	r3, #1
 800112e:	f040 8086 	bne.w	800123e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	2b00      	cmp	r3, #0
 8001152:	d007      	beq.n	8001164 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800115c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001170:	d106      	bne.n	8001180 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f023 0206 	bic.w	r2, r3, #6
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
 800117e:	e002      	b.n	8001186 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2200      	movs	r2, #0
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118e:	4b36      	ldr	r3, [pc, #216]	; (8001268 <HAL_ADC_Start_DMA+0x1cc>)
 8001190:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	4a35      	ldr	r2, [pc, #212]	; (800126c <HAL_ADC_Start_DMA+0x1d0>)
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119e:	4a34      	ldr	r2, [pc, #208]	; (8001270 <HAL_ADC_Start_DMA+0x1d4>)
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a6:	4a33      	ldr	r2, [pc, #204]	; (8001274 <HAL_ADC_Start_DMA+0x1d8>)
 80011a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	334c      	adds	r3, #76	; 0x4c
 80011de:	4619      	mov	r1, r3
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f000 fcce 	bl	8001b84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10f      	bne.n	8001214 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d129      	bne.n	8001256 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	e020      	b.n	8001256 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a17      	ldr	r2, [pc, #92]	; (8001278 <HAL_ADC_Start_DMA+0x1dc>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d11b      	bne.n	8001256 <HAL_ADC_Start_DMA+0x1ba>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d114      	bne.n	8001256 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	e00b      	b.n	8001256 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f043 0210 	orr.w	r2, r3, #16
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f043 0201 	orr.w	r2, r3, #1
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	431bde83 	.word	0x431bde83
 8001268:	40012300 	.word	0x40012300
 800126c:	08001701 	.word	0x08001701
 8001270:	080017bb 	.word	0x080017bb
 8001274:	080017d7 	.word	0x080017d7
 8001278:	40012000 	.word	0x40012000

0800127c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x1c>
 80012bc:	2302      	movs	r3, #2
 80012be:	e113      	b.n	80014e8 <HAL_ADC_ConfigChannel+0x244>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	d925      	bls.n	800131c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68d9      	ldr	r1, [r3, #12]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	3b1e      	subs	r3, #30
 80012e6:	2207      	movs	r2, #7
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43da      	mvns	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	400a      	ands	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68d9      	ldr	r1, [r3, #12]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	4603      	mov	r3, r0
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4403      	add	r3, r0
 800130e:	3b1e      	subs	r3, #30
 8001310:	409a      	lsls	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	e022      	b.n	8001362 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6919      	ldr	r1, [r3, #16]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	461a      	mov	r2, r3
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	2207      	movs	r2, #7
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	400a      	ands	r2, r1
 800133e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6919      	ldr	r1, [r3, #16]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	4603      	mov	r3, r0
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4403      	add	r3, r0
 8001358:	409a      	lsls	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b06      	cmp	r3, #6
 8001368:	d824      	bhi.n	80013b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	3b05      	subs	r3, #5
 800137c:	221f      	movs	r2, #31
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	400a      	ands	r2, r1
 800138a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3b05      	subs	r3, #5
 80013a6:	fa00 f203 	lsl.w	r2, r0, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	635a      	str	r2, [r3, #52]	; 0x34
 80013b2:	e04c      	b.n	800144e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	d824      	bhi.n	8001406 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3b23      	subs	r3, #35	; 0x23
 80013ce:	221f      	movs	r2, #31
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43da      	mvns	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	400a      	ands	r2, r1
 80013dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b23      	subs	r3, #35	; 0x23
 80013f8:	fa00 f203 	lsl.w	r2, r0, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
 8001404:	e023      	b.n	800144e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	3b41      	subs	r3, #65	; 0x41
 8001418:	221f      	movs	r2, #31
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	400a      	ands	r2, r1
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b41      	subs	r3, #65	; 0x41
 8001442:	fa00 f203 	lsl.w	r2, r0, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <HAL_ADC_ConfigChannel+0x250>)
 8001450:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a28      	ldr	r2, [pc, #160]	; (80014f8 <HAL_ADC_ConfigChannel+0x254>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d10f      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1d8>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b12      	cmp	r3, #18
 8001462:	d10b      	bne.n	800147c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1d      	ldr	r2, [pc, #116]	; (80014f8 <HAL_ADC_ConfigChannel+0x254>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d12b      	bne.n	80014de <HAL_ADC_ConfigChannel+0x23a>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <HAL_ADC_ConfigChannel+0x258>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d003      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x1f4>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b11      	cmp	r3, #17
 8001496:	d122      	bne.n	80014de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_ADC_ConfigChannel+0x258>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d111      	bne.n	80014de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_ADC_ConfigChannel+0x25c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_ADC_ConfigChannel+0x260>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	0c9a      	lsrs	r2, r3, #18
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014d0:	e002      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f9      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40012300 	.word	0x40012300
 80014f8:	40012000 	.word	0x40012000
 80014fc:	10000012 	.word	0x10000012
 8001500:	20000000 	.word	0x20000000
 8001504:	431bde83 	.word	0x431bde83

08001508 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001510:	4b79      	ldr	r3, [pc, #484]	; (80016f8 <ADC_Init+0x1f0>)
 8001512:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	431a      	orrs	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800153c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6859      	ldr	r1, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	021a      	lsls	r2, r3, #8
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6859      	ldr	r1, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6899      	ldr	r1, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	4a58      	ldr	r2, [pc, #352]	; (80016fc <ADC_Init+0x1f4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d022      	beq.n	80015e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6899      	ldr	r1, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6899      	ldr	r1, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e00f      	b.n	8001606 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001604:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0202 	bic.w	r2, r2, #2
 8001614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6899      	ldr	r1, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7e1b      	ldrb	r3, [r3, #24]
 8001620:	005a      	lsls	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d01b      	beq.n	800166c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001642:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001652:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6859      	ldr	r1, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	3b01      	subs	r3, #1
 8001660:	035a      	lsls	r2, r3, #13
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	e007      	b.n	800167c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800167a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	3b01      	subs	r3, #1
 8001698:	051a      	lsls	r2, r3, #20
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6899      	ldr	r1, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016be:	025a      	lsls	r2, r3, #9
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6899      	ldr	r1, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	029a      	lsls	r2, r3, #10
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40012300 	.word	0x40012300
 80016fc:	0f000001 	.word	0x0f000001

08001700 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001716:	2b00      	cmp	r3, #0
 8001718:	d13c      	bne.n	8001794 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d12b      	bne.n	800178c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001738:	2b00      	cmp	r3, #0
 800173a:	d127      	bne.n	800178c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001754:	2b00      	cmp	r3, #0
 8001756:	d119      	bne.n	800178c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0220 	bic.w	r2, r2, #32
 8001766:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d105      	bne.n	800178c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff f947 	bl	8000a20 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001792:	e00e      	b.n	80017b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f7ff fd75 	bl	8001290 <HAL_ADC_ErrorCallback>
}
 80017a6:	e004      	b.n	80017b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f7ff fd57 	bl	800127c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2240      	movs	r2, #64	; 0x40
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f043 0204 	orr.w	r2, r3, #4
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fd4a 	bl	8001290 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	; (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff29 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff3e 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff8e 	bl	80018f8 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5d 	bl	80018a4 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff31 	bl	8001868 <__NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa2 	bl	8001960 <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff fae2 	bl	8000ffc <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e099      	b.n	8001b78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a64:	e00f      	b.n	8001a86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a66:	f7ff fac9 	bl	8000ffc <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	d908      	bls.n	8001a86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e078      	b.n	8001b78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1e8      	bne.n	8001a66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_DMA_Init+0x158>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d107      	bne.n	8001af0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f023 0307 	bic.w	r3, r3, #7
 8001b06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d117      	bne.n	8001b4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00e      	beq.n	8001b4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fb01 	bl	8002134 <DMA_CheckFifoParam>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2240      	movs	r2, #64	; 0x40
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b46:	2301      	movs	r3, #1
 8001b48:	e016      	b.n	8001b78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fab8 	bl	80020c8 <DMA_CalcBaseAndBitshift>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b60:	223f      	movs	r2, #63	; 0x3f
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	f010803f 	.word	0xf010803f

08001b84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_DMA_Start_IT+0x26>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e040      	b.n	8001c2c <HAL_DMA_Start_IT+0xa8>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d12f      	bne.n	8001c1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fa4a 	bl	800206c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	223f      	movs	r2, #63	; 0x3f
 8001bde:	409a      	lsls	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0216 	orr.w	r2, r2, #22
 8001bf2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0208 	orr.w	r2, r2, #8
 8001c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e005      	b.n	8001c2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
 8001c28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c42:	f7ff f9db 	bl	8000ffc <HAL_GetTick>
 8001c46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d008      	beq.n	8001c66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e052      	b.n	8001d0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0216 	bic.w	r2, r2, #22
 8001c74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <HAL_DMA_Abort+0x62>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0208 	bic.w	r2, r2, #8
 8001ca4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb6:	e013      	b.n	8001ce0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb8:	f7ff f9a0 	bl	8000ffc <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d90c      	bls.n	8001ce0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2203      	movs	r2, #3
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e015      	b.n	8001d0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1e4      	bne.n	8001cb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf2:	223f      	movs	r2, #63	; 0x3f
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d004      	beq.n	8001d32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00c      	b.n	8001d4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2205      	movs	r2, #5
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d64:	4b8e      	ldr	r3, [pc, #568]	; (8001fa0 <HAL_DMA_IRQHandler+0x248>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a8e      	ldr	r2, [pc, #568]	; (8001fa4 <HAL_DMA_IRQHandler+0x24c>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d82:	2208      	movs	r2, #8
 8001d84:	409a      	lsls	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0204 	bic.w	r2, r2, #4
 8001daa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	2208      	movs	r2, #8
 8001db2:	409a      	lsls	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	2201      	movs	r2, #1
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d012      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2201      	movs	r2, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2204      	movs	r2, #4
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	f043 0204 	orr.w	r2, r3, #4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	2210      	movs	r2, #16
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d043      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d03c      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2210      	movs	r2, #16
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d108      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d024      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
 8001e86:	e01f      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
 8001e98:	e016      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0208 	bic.w	r2, r2, #8
 8001eb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2220      	movs	r2, #32
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 808f 	beq.w	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8087 	beq.w	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2220      	movs	r2, #32
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d136      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0216 	bic.w	r2, r2, #22
 8001f10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <HAL_DMA_IRQHandler+0x1da>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0208 	bic.w	r2, r2, #8
 8001f40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	223f      	movs	r2, #63	; 0x3f
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d07e      	beq.n	8002064 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
        }
        return;
 8001f6e:	e079      	b.n	8002064 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01d      	beq.n	8001fba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d031      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e02c      	b.n	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
 8001f9e:	bf00      	nop
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d023      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
 8001fb8:	e01e      	b.n	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10f      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0210 	bic.w	r2, r2, #16
 8001fd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d032      	beq.n	8002066 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d022      	beq.n	8002052 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2205      	movs	r2, #5
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	3301      	adds	r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	d307      	bcc.n	8002040 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f2      	bne.n	8002024 <HAL_DMA_IRQHandler+0x2cc>
 800203e:	e000      	b.n	8002042 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002040:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
 8002062:	e000      	b.n	8002066 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002064:	bf00      	nop
    }
  }
}
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002088:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d108      	bne.n	80020ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020aa:	e007      	b.n	80020bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3b10      	subs	r3, #16
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <DMA_CalcBaseAndBitshift+0x64>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020e2:	4a13      	ldr	r2, [pc, #76]	; (8002130 <DMA_CalcBaseAndBitshift+0x68>)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d909      	bls.n	800210a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	1d1a      	adds	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	659a      	str	r2, [r3, #88]	; 0x58
 8002108:	e007      	b.n	800211a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	aaaaaaab 	.word	0xaaaaaaab
 8002130:	08005318 	.word	0x08005318

08002134 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11f      	bne.n	800218e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d856      	bhi.n	8002202 <DMA_CheckFifoParam+0xce>
 8002154:	a201      	add	r2, pc, #4	; (adr r2, 800215c <DMA_CheckFifoParam+0x28>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	0800216d 	.word	0x0800216d
 8002160:	0800217f 	.word	0x0800217f
 8002164:	0800216d 	.word	0x0800216d
 8002168:	08002203 	.word	0x08002203
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d046      	beq.n	8002206 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800217c:	e043      	b.n	8002206 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002186:	d140      	bne.n	800220a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218c:	e03d      	b.n	800220a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002196:	d121      	bne.n	80021dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d837      	bhi.n	800220e <DMA_CheckFifoParam+0xda>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <DMA_CheckFifoParam+0x70>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021bb 	.word	0x080021bb
 80021ac:	080021b5 	.word	0x080021b5
 80021b0:	080021cd 	.word	0x080021cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      break;
 80021b8:	e030      	b.n	800221c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d025      	beq.n	8002212 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ca:	e022      	b.n	8002212 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021d4:	d11f      	bne.n	8002216 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021da:	e01c      	b.n	8002216 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d903      	bls.n	80021ea <DMA_CheckFifoParam+0xb6>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d003      	beq.n	80021f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021e8:	e018      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
      break;
 80021ee:	e015      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00e      	beq.n	800221a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002200:	e00b      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002202:	bf00      	nop
 8002204:	e00a      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;
 8002206:	bf00      	nop
 8002208:	e008      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;
 800220a:	bf00      	nop
 800220c:	e006      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;
 800220e:	bf00      	nop
 8002210:	e004      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;
 8002212:	bf00      	nop
 8002214:	e002      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;   
 8002216:	bf00      	nop
 8002218:	e000      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;
 800221a:	bf00      	nop
    }
  } 
  
  return status; 
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	; 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e159      	b.n	80024fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 8148 	bne.w	80024f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d005      	beq.n	800227e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	2b02      	cmp	r3, #2
 800227c:	d130      	bne.n	80022e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d017      	beq.n	800231c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d123      	bne.n	8002370 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	69b9      	ldr	r1, [r7, #24]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a2 	beq.w	80024f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b57      	ldr	r3, [pc, #348]	; (8002514 <HAL_GPIO_Init+0x2e8>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4a56      	ldr	r2, [pc, #344]	; (8002514 <HAL_GPIO_Init+0x2e8>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	; 0x44
 80023c2:	4b54      	ldr	r3, [pc, #336]	; (8002514 <HAL_GPIO_Init+0x2e8>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ce:	4a52      	ldr	r2, [pc, #328]	; (8002518 <HAL_GPIO_Init+0x2ec>)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a49      	ldr	r2, [pc, #292]	; (800251c <HAL_GPIO_Init+0x2f0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d019      	beq.n	800242e <HAL_GPIO_Init+0x202>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a48      	ldr	r2, [pc, #288]	; (8002520 <HAL_GPIO_Init+0x2f4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0x1fe>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a47      	ldr	r2, [pc, #284]	; (8002524 <HAL_GPIO_Init+0x2f8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00d      	beq.n	8002426 <HAL_GPIO_Init+0x1fa>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_GPIO_Init+0x2fc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <HAL_GPIO_Init+0x1f6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a45      	ldr	r2, [pc, #276]	; (800252c <HAL_GPIO_Init+0x300>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_GPIO_Init+0x1f2>
 800241a:	2304      	movs	r3, #4
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x204>
 800241e:	2307      	movs	r3, #7
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x204>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x204>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x204>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x204>
 800242e:	2300      	movs	r3, #0
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002440:	4935      	ldr	r1, [pc, #212]	; (8002518 <HAL_GPIO_Init+0x2ec>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b38      	ldr	r3, [pc, #224]	; (8002530 <HAL_GPIO_Init+0x304>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <HAL_GPIO_Init+0x304>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <HAL_GPIO_Init+0x304>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a24      	ldr	r2, [pc, #144]	; (8002530 <HAL_GPIO_Init+0x304>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a2:	4b23      	ldr	r3, [pc, #140]	; (8002530 <HAL_GPIO_Init+0x304>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c6:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <HAL_GPIO_Init+0x304>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_GPIO_Init+0x304>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f0:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <HAL_GPIO_Init+0x304>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	f67f aea2 	bls.w	8002248 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40013800 	.word	0x40013800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020400 	.word	0x40020400
 8002524:	40020800 	.word	0x40020800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	041a      	lsls	r2, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43d9      	mvns	r1, r3
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	400b      	ands	r3, r1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e267      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d075      	beq.n	80026a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ba:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d00c      	beq.n	80025e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c6:	4b85      	ldr	r3, [pc, #532]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d112      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025de:	d10b      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e0:	4b7e      	ldr	r3, [pc, #504]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d05b      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d157      	bne.n	80026a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e242      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x74>
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a75      	ldr	r2, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e01d      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a6f      	ldr	r2, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b6d      	ldr	r3, [pc, #436]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a6c      	ldr	r2, [pc, #432]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0xb0>
 8002634:	4b69      	ldr	r3, [pc, #420]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a68      	ldr	r2, [pc, #416]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800263a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b66      	ldr	r3, [pc, #408]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a65      	ldr	r2, [pc, #404]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d013      	beq.n	800267c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002654:	f7fe fcd2 	bl	8000ffc <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800265c:	f7fe fcce 	bl	8000ffc <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b64      	cmp	r3, #100	; 0x64
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e207      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0xc0>
 800267a:	e014      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fcbe 	bl	8000ffc <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002684:	f7fe fcba 	bl	8000ffc <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e1f3      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002696:	4b51      	ldr	r3, [pc, #324]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0xe8>
 80026a2:	e000      	b.n	80026a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d063      	beq.n	800277a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b2:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d11c      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ca:	4b44      	ldr	r3, [pc, #272]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d116      	bne.n	8002704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d005      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e1c7      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4b3b      	ldr	r3, [pc, #236]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4937      	ldr	r1, [pc, #220]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	e03a      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d020      	beq.n	800274e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270c:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_RCC_OscConfig+0x244>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe fc73 	bl	8000ffc <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271a:	f7fe fc6f 	bl	8000ffc <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e1a8      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4925      	ldr	r1, [pc, #148]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <HAL_RCC_OscConfig+0x244>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fc52 	bl	8000ffc <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275c:	f7fe fc4e 	bl	8000ffc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e187      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d036      	beq.n	80027f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_RCC_OscConfig+0x248>)
 8002790:	2201      	movs	r2, #1
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe fc32 	bl	8000ffc <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe fc2e 	bl	8000ffc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e167      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_OscConfig+0x240>)
 80027b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x200>
 80027ba:	e01b      	b.n	80027f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_OscConfig+0x248>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe fc1b 	bl	8000ffc <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e00e      	b.n	80027e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe fc17 	bl	8000ffc <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d907      	bls.n	80027e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e150      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 80027dc:	40023800 	.word	0x40023800
 80027e0:	42470000 	.word	0x42470000
 80027e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ea      	bne.n	80027ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8097 	beq.w	8002930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002806:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10f      	bne.n	8002832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b7d      	ldr	r3, [pc, #500]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a7c      	ldr	r2, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800281c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282e:	2301      	movs	r3, #1
 8002830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	4b77      	ldr	r3, [pc, #476]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d118      	bne.n	8002870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283e:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a73      	ldr	r2, [pc, #460]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7fe fbd7 	bl	8000ffc <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7fe fbd3 	bl	8000ffc <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e10c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x474>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x2ea>
 8002878:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287c:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6713      	str	r3, [r2, #112]	; 0x70
 8002884:	e01c      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b05      	cmp	r3, #5
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x30c>
 800288e:	4b5f      	ldr	r3, [pc, #380]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a5e      	ldr	r2, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a5b      	ldr	r2, [pc, #364]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0x324>
 80028a8:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	4b55      	ldr	r3, [pc, #340]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d015      	beq.n	80028f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe fb98 	bl	8000ffc <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe fb94 	bl	8000ffc <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e0cb      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e6:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0ee      	beq.n	80028d0 <HAL_RCC_OscConfig+0x334>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f4:	f7fe fb82 	bl	8000ffc <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe fb7e 	bl	8000ffc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0b5      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002912:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ee      	bne.n	80028fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d105      	bne.n	8002930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800292a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a1 	beq.w	8002a7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800293a:	4b34      	ldr	r3, [pc, #208]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b08      	cmp	r3, #8
 8002944:	d05c      	beq.n	8002a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d141      	bne.n	80029d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fb52 	bl	8000ffc <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fb4e 	bl	8000ffc <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e087      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	3b01      	subs	r3, #1
 8002994:	041b      	lsls	r3, r3, #16
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fb27 	bl	8000ffc <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fb23 	bl	8000ffc <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e05c      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x416>
 80029d0:	e054      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x478>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fb10 	bl	8000ffc <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fb0c 	bl	8000ffc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e045      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x470>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x444>
 80029fe:	e03d      	b.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e038      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x4ec>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d028      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d121      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	3b01      	subs	r3, #1
 8002a62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800

08002a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0cc      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d90c      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b65      	ldr	r3, [pc, #404]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0b8      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d020      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af8:	4b53      	ldr	r3, [pc, #332]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	494d      	ldr	r1, [pc, #308]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d044      	beq.n	8002bac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d119      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d003      	beq.n	8002b4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e06f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e067      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b6a:	4b37      	ldr	r3, [pc, #220]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4934      	ldr	r1, [pc, #208]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b7c:	f7fe fa3e 	bl	8000ffc <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b84:	f7fe fa3a 	bl	8000ffc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e04f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 020c 	and.w	r2, r3, #12
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d1eb      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bac:	4b25      	ldr	r3, [pc, #148]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d20c      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b22      	ldr	r3, [pc, #136]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e032      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4916      	ldr	r1, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c12:	f000 f821 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	490a      	ldr	r1, [pc, #40]	; (8002c4c <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	5ccb      	ldrb	r3, [r1, r3]
 8002c26:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2a:	4a09      	ldr	r2, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_RCC_ClockConfig+0x1c8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe f99e 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	08005300 	.word	0x08005300
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c5c:	b094      	sub	sp, #80	; 0x50
 8002c5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	647b      	str	r3, [r7, #68]	; 0x44
 8002c64:	2300      	movs	r3, #0
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c68:	2300      	movs	r3, #0
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d00d      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	f200 80e1 	bhi.w	8002e44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c8a:	e0db      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c90:	e0db      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c92:	4b73      	ldr	r3, [pc, #460]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c96:	e0d8      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca2:	4b6d      	ldr	r3, [pc, #436]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d063      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cca:	4622      	mov	r2, r4
 8002ccc:	462b      	mov	r3, r5
 8002cce:	f04f 0000 	mov.w	r0, #0
 8002cd2:	f04f 0100 	mov.w	r1, #0
 8002cd6:	0159      	lsls	r1, r3, #5
 8002cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cdc:	0150      	lsls	r0, r2, #5
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	1a51      	subs	r1, r2, r1
 8002ce6:	6139      	str	r1, [r7, #16]
 8002ce8:	4629      	mov	r1, r5
 8002cea:	eb63 0301 	sbc.w	r3, r3, r1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	018b      	lsls	r3, r1, #6
 8002d00:	4651      	mov	r1, sl
 8002d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d06:	4651      	mov	r1, sl
 8002d08:	018a      	lsls	r2, r1, #6
 8002d0a:	4651      	mov	r1, sl
 8002d0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002d10:	4659      	mov	r1, fp
 8002d12:	eb63 0901 	sbc.w	r9, r3, r1
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d2a:	4690      	mov	r8, r2
 8002d2c:	4699      	mov	r9, r3
 8002d2e:	4623      	mov	r3, r4
 8002d30:	eb18 0303 	adds.w	r3, r8, r3
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	462b      	mov	r3, r5
 8002d38:	eb49 0303 	adc.w	r3, r9, r3
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	024b      	lsls	r3, r1, #9
 8002d4e:	4621      	mov	r1, r4
 8002d50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d54:	4621      	mov	r1, r4
 8002d56:	024a      	lsls	r2, r1, #9
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5e:	2200      	movs	r2, #0
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d68:	f7fd fa96 	bl	8000298 <__aeabi_uldivmod>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4613      	mov	r3, r2
 8002d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d74:	e058      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	099b      	lsrs	r3, r3, #6
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4618      	mov	r0, r3
 8002d80:	4611      	mov	r1, r2
 8002d82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d90:	4642      	mov	r2, r8
 8002d92:	464b      	mov	r3, r9
 8002d94:	f04f 0000 	mov.w	r0, #0
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	0159      	lsls	r1, r3, #5
 8002d9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da2:	0150      	lsls	r0, r2, #5
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4641      	mov	r1, r8
 8002daa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dae:	4649      	mov	r1, r9
 8002db0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002dcc:	eb63 050b 	sbc.w	r5, r3, fp
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	00eb      	lsls	r3, r5, #3
 8002dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dde:	00e2      	lsls	r2, r4, #3
 8002de0:	4614      	mov	r4, r2
 8002de2:	461d      	mov	r5, r3
 8002de4:	4643      	mov	r3, r8
 8002de6:	18e3      	adds	r3, r4, r3
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	464b      	mov	r3, r9
 8002dec:	eb45 0303 	adc.w	r3, r5, r3
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	028b      	lsls	r3, r1, #10
 8002e02:	4621      	mov	r1, r4
 8002e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e08:	4621      	mov	r1, r4
 8002e0a:	028a      	lsls	r2, r1, #10
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e12:	2200      	movs	r2, #0
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	61fa      	str	r2, [r7, #28]
 8002e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1c:	f7fd fa3c 	bl	8000298 <__aeabi_uldivmod>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4613      	mov	r3, r2
 8002e26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	3301      	adds	r3, #1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3750      	adds	r7, #80	; 0x50
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	00f42400 	.word	0x00f42400
 8002e60:	007a1200 	.word	0x007a1200

08002e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000000 	.word	0x20000000

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0a9b      	lsrs	r3, r3, #10
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4903      	ldr	r1, [pc, #12]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	08005310 	.word	0x08005310

08002ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ea8:	f7ff ffdc 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	0b5b      	lsrs	r3, r3, #13
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	08005310 	.word	0x08005310

08002ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e03f      	b.n	8002f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd ff70 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fdd1 	bl	8003ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d165      	bne.n	800304e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <HAL_UART_Transmit_DMA+0x26>
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e05e      	b.n	8003050 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_UART_Transmit_DMA+0x38>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e057      	b.n	8003050 <HAL_UART_Transmit_DMA+0xe8>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	88fa      	ldrh	r2, [r7, #6]
 8002fb8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2221      	movs	r2, #33	; 0x21
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fcc:	4a22      	ldr	r2, [pc, #136]	; (8003058 <HAL_UART_Transmit_DMA+0xf0>)
 8002fce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd4:	4a21      	ldr	r2, [pc, #132]	; (800305c <HAL_UART_Transmit_DMA+0xf4>)
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	4a20      	ldr	r2, [pc, #128]	; (8003060 <HAL_UART_Transmit_DMA+0xf8>)
 8002fde:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002fe8:	f107 0308 	add.w	r3, r7, #8
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	f7fe fdc0 	bl	8001b84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800300c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3314      	adds	r3, #20
 800301c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	e853 3f00 	ldrex	r3, [r3]
 8003024:	617b      	str	r3, [r7, #20]
   return(result);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3314      	adds	r3, #20
 8003034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003036:	627a      	str	r2, [r7, #36]	; 0x24
 8003038:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303a:	6a39      	ldr	r1, [r7, #32]
 800303c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	61fb      	str	r3, [r7, #28]
   return(result);
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1e5      	bne.n	8003016 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e000      	b.n	8003050 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800304e:	2302      	movs	r3, #2
  }
}
 8003050:	4618      	mov	r0, r3
 8003052:	3730      	adds	r7, #48	; 0x30
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	080035e9 	.word	0x080035e9
 800305c:	08003683 	.word	0x08003683
 8003060:	0800369f 	.word	0x0800369f

08003064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b0ba      	sub	sp, #232	; 0xe8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_UART_IRQHandler+0x66>
 80030b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fc3c 	bl	8003940 <UART_Receive_IT>
      return;
 80030c8:	e256      	b.n	8003578 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80de 	beq.w	8003290 <HAL_UART_IRQHandler+0x22c>
 80030d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d106      	bne.n	80030ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80d1 	beq.w	8003290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_UART_IRQHandler+0xae>
 80030fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <HAL_UART_IRQHandler+0xd2>
 800311e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f043 0202 	orr.w	r2, r3, #2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_UART_IRQHandler+0xf6>
 8003142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f043 0204 	orr.w	r2, r3, #4
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d011      	beq.n	800318a <HAL_UART_IRQHandler+0x126>
 8003166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f043 0208 	orr.w	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 81ed 	beq.w	800356e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_UART_IRQHandler+0x14e>
 80031a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fbc7 	bl	8003940 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d103      	bne.n	80031de <HAL_UART_IRQHandler+0x17a>
 80031d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d04f      	beq.n	800327e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 facf 	bl	8003782 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d141      	bne.n	8003276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3314      	adds	r3, #20
 80031f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800320c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3314      	adds	r3, #20
 800321a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800321e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800322a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1d9      	bne.n	80031f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	2b00      	cmp	r3, #0
 8003244:	d013      	beq.n	800326e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	4a7d      	ldr	r2, [pc, #500]	; (8003440 <HAL_UART_IRQHandler+0x3dc>)
 800324c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fd5e 	bl	8001d14 <HAL_DMA_Abort_IT>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003268:	4610      	mov	r0, r2
 800326a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	e00e      	b.n	800328c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f9a4 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003274:	e00a      	b.n	800328c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f9a0 	bl	80035bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	e006      	b.n	800328c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f99c 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800328a:	e170      	b.n	800356e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	bf00      	nop
    return;
 800328e:	e16e      	b.n	800356e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 814a 	bne.w	800352e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800329a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8143 	beq.w	800352e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 813c 	beq.w	800352e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	f040 80b4 	bne.w	8003444 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8140 	beq.w	8003572 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032fa:	429a      	cmp	r2, r3
 80032fc:	f080 8139 	bcs.w	8003572 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003306:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003312:	f000 8088 	beq.w	8003426 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800332c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800334e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800335a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1d9      	bne.n	8003316 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3314      	adds	r3, #20
 8003368:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3314      	adds	r3, #20
 8003382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003386:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800338a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800338e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e1      	bne.n	8003362 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3314      	adds	r3, #20
 80033a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3314      	adds	r3, #20
 80033be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e3      	bne.n	800339e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ee:	e853 3f00 	ldrex	r3, [r3]
 80033f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f6:	f023 0310 	bic.w	r3, r3, #16
 80033fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003408:	65ba      	str	r2, [r7, #88]	; 0x58
 800340a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800340e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e3      	bne.n	80033e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe fc07 	bl	8001c34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800342e:	b29b      	uxth	r3, r3
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	b29b      	uxth	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8ca 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800343c:	e099      	b.n	8003572 <HAL_UART_IRQHandler+0x50e>
 800343e:	bf00      	nop
 8003440:	08003849 	.word	0x08003849
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800344c:	b29b      	uxth	r3, r3
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 808b 	beq.w	8003576 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8086 	beq.w	8003576 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800348e:	647a      	str	r2, [r7, #68]	; 0x44
 8003490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800349c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e3      	bne.n	800346a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3314      	adds	r3, #20
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	623b      	str	r3, [r7, #32]
   return(result);
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3314      	adds	r3, #20
 80034c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034c6:	633a      	str	r2, [r7, #48]	; 0x30
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e3      	bne.n	80034a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0310 	bic.w	r3, r3, #16
 80034fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800350c:	61fa      	str	r2, [r7, #28]
 800350e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	69b9      	ldr	r1, [r7, #24]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	617b      	str	r3, [r7, #20]
   return(result);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e3      	bne.n	80034e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003524:	4619      	mov	r1, r3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f852 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800352c:	e023      	b.n	8003576 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800352e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_UART_IRQHandler+0x4ea>
 800353a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f992 	bl	8003870 <UART_Transmit_IT>
    return;
 800354c:	e014      	b.n	8003578 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00e      	beq.n	8003578 <HAL_UART_IRQHandler+0x514>
 800355a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9d2 	bl	8003910 <UART_EndTransmit_IT>
    return;
 800356c:	e004      	b.n	8003578 <HAL_UART_IRQHandler+0x514>
    return;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <HAL_UART_IRQHandler+0x514>
      return;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_UART_IRQHandler+0x514>
      return;
 8003576:	bf00      	nop
  }
}
 8003578:	37e8      	adds	r7, #232	; 0xe8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop

08003580 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b090      	sub	sp, #64	; 0x40
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d137      	bne.n	8003674 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003606:	2200      	movs	r2, #0
 8003608:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800360a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3314      	adds	r3, #20
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	623b      	str	r3, [r7, #32]
   return(result);
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
 8003622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3314      	adds	r3, #20
 8003628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800362a:	633a      	str	r2, [r7, #48]	; 0x30
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e5      	bne.n	800360a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800363e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	60fb      	str	r3, [r7, #12]
   return(result);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
 8003656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800365e:	61fa      	str	r2, [r7, #28]
 8003660:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	69b9      	ldr	r1, [r7, #24]
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	617b      	str	r3, [r7, #20]
   return(result);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e5      	bne.n	800363e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003672:	e002      	b.n	800367a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003674:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003676:	f7ff ff83 	bl	8003580 <HAL_UART_TxCpltCallback>
}
 800367a:	bf00      	nop
 800367c:	3740      	adds	r7, #64	; 0x40
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff ff7f 	bl	8003594 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b80      	cmp	r3, #128	; 0x80
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b21      	cmp	r3, #33	; 0x21
 80036d0:	d108      	bne.n	80036e4 <UART_DMAError+0x46>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2200      	movs	r2, #0
 80036dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80036de:	68b8      	ldr	r0, [r7, #8]
 80036e0:	f000 f827 	bl	8003732 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ee:	2b40      	cmp	r3, #64	; 0x40
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b22      	cmp	r3, #34	; 0x22
 8003704:	d108      	bne.n	8003718 <UART_DMAError+0x7a>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2200      	movs	r2, #0
 8003710:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003712:	68b8      	ldr	r0, [r7, #8]
 8003714:	f000 f835 	bl	8003782 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0210 	orr.w	r2, r3, #16
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003724:	68b8      	ldr	r0, [r7, #8]
 8003726:	f7ff ff49 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800372a:	bf00      	nop
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003732:	b480      	push	{r7}
 8003734:	b089      	sub	sp, #36	; 0x24
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	60bb      	str	r3, [r7, #8]
   return(result);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	61ba      	str	r2, [r7, #24]
 800375c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	6979      	ldr	r1, [r7, #20]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	613b      	str	r3, [r7, #16]
   return(result);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e5      	bne.n	800373a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003776:	bf00      	nop
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003782:	b480      	push	{r7}
 8003784:	b095      	sub	sp, #84	; 0x54
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	330c      	adds	r3, #12
 8003790:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037aa:	643a      	str	r2, [r7, #64]	; 0x40
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e5      	bne.n	800378a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3314      	adds	r3, #20
 80037c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3314      	adds	r3, #20
 80037dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e5      	bne.n	80037be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d119      	bne.n	800382e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	330c      	adds	r3, #12
 8003800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	60bb      	str	r3, [r7, #8]
   return(result);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f023 0310 	bic.w	r3, r3, #16
 8003810:	647b      	str	r3, [r7, #68]	; 0x44
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800381a:	61ba      	str	r2, [r7, #24]
 800381c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	6979      	ldr	r1, [r7, #20]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	613b      	str	r3, [r7, #16]
   return(result);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e5      	bne.n	80037fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800383c:	bf00      	nop
 800383e:	3754      	adds	r7, #84	; 0x54
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff feaa 	bl	80035bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b21      	cmp	r3, #33	; 0x21
 8003882:	d13e      	bne.n	8003902 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388c:	d114      	bne.n	80038b8 <UART_Transmit_IT+0x48>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d110      	bne.n	80038b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	1c9a      	adds	r2, r3, #2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	621a      	str	r2, [r3, #32]
 80038b6:	e008      	b.n	80038ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	1c59      	adds	r1, r3, #1
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6211      	str	r1, [r2, #32]
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4619      	mov	r1, r3
 80038d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10f      	bne.n	80038fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	e000      	b.n	8003904 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003902:	2302      	movs	r3, #2
  }
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003926:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fe25 	bl	8003580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08c      	sub	sp, #48	; 0x30
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b22      	cmp	r3, #34	; 0x22
 8003952:	f040 80ab 	bne.w	8003aac <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395e:	d117      	bne.n	8003990 <UART_Receive_IT+0x50>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d113      	bne.n	8003990 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	b29b      	uxth	r3, r3
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	b29a      	uxth	r2, r3
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	1c9a      	adds	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	629a      	str	r2, [r3, #40]	; 0x28
 800398e:	e026      	b.n	80039de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a2:	d007      	beq.n	80039b4 <UART_Receive_IT+0x74>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <UART_Receive_IT+0x82>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	e008      	b.n	80039d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4619      	mov	r1, r3
 80039ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d15a      	bne.n	8003aa8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0220 	bic.w	r2, r2, #32
 8003a00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d135      	bne.n	8003a9e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	613b      	str	r3, [r7, #16]
   return(result);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f023 0310 	bic.w	r3, r3, #16
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	623a      	str	r2, [r7, #32]
 8003a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	69f9      	ldr	r1, [r7, #28]
 8003a5e:	6a3a      	ldr	r2, [r7, #32]
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e5      	bne.n	8003a38 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d10a      	bne.n	8003a90 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a94:	4619      	mov	r1, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff fd9a 	bl	80035d0 <HAL_UARTEx_RxEventCallback>
 8003a9c:	e002      	b.n	8003aa4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fd82 	bl	80035a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e002      	b.n	8003aae <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e000      	b.n	8003aae <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003aac:	2302      	movs	r3, #2
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3730      	adds	r7, #48	; 0x30
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003abc:	b0c0      	sub	sp, #256	; 0x100
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad4:	68d9      	ldr	r1, [r3, #12]
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	ea40 0301 	orr.w	r3, r0, r1
 8003ae0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b10:	f021 010c 	bic.w	r1, r1, #12
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b32:	6999      	ldr	r1, [r3, #24]
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	ea40 0301 	orr.w	r3, r0, r1
 8003b3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4b8f      	ldr	r3, [pc, #572]	; (8003d84 <UART_SetConfig+0x2cc>)
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d005      	beq.n	8003b58 <UART_SetConfig+0xa0>
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b8d      	ldr	r3, [pc, #564]	; (8003d88 <UART_SetConfig+0x2d0>)
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d104      	bne.n	8003b62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b58:	f7ff f9a4 	bl	8002ea4 <HAL_RCC_GetPCLK2Freq>
 8003b5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b60:	e003      	b.n	8003b6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b62:	f7ff f98b 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8003b66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b74:	f040 810c 	bne.w	8003d90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	462b      	mov	r3, r5
 8003b8e:	1891      	adds	r1, r2, r2
 8003b90:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b92:	415b      	adcs	r3, r3
 8003b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	eb12 0801 	adds.w	r8, r2, r1
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	eb43 0901 	adc.w	r9, r3, r1
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bba:	4690      	mov	r8, r2
 8003bbc:	4699      	mov	r9, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	eb18 0303 	adds.w	r3, r8, r3
 8003bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003bc8:	462b      	mov	r3, r5
 8003bca:	eb49 0303 	adc.w	r3, r9, r3
 8003bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003be6:	460b      	mov	r3, r1
 8003be8:	18db      	adds	r3, r3, r3
 8003bea:	653b      	str	r3, [r7, #80]	; 0x50
 8003bec:	4613      	mov	r3, r2
 8003bee:	eb42 0303 	adc.w	r3, r2, r3
 8003bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8003bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003bf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bfc:	f7fc fb4c 	bl	8000298 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4b61      	ldr	r3, [pc, #388]	; (8003d8c <UART_SetConfig+0x2d4>)
 8003c06:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	011c      	lsls	r4, r3, #4
 8003c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c12:	2200      	movs	r2, #0
 8003c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	1891      	adds	r1, r2, r2
 8003c26:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c28:	415b      	adcs	r3, r3
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c30:	4641      	mov	r1, r8
 8003c32:	eb12 0a01 	adds.w	sl, r2, r1
 8003c36:	4649      	mov	r1, r9
 8003c38:	eb43 0b01 	adc.w	fp, r3, r1
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c50:	4692      	mov	sl, r2
 8003c52:	469b      	mov	fp, r3
 8003c54:	4643      	mov	r3, r8
 8003c56:	eb1a 0303 	adds.w	r3, sl, r3
 8003c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	eb4b 0303 	adc.w	r3, fp, r3
 8003c64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	18db      	adds	r3, r3, r3
 8003c80:	643b      	str	r3, [r7, #64]	; 0x40
 8003c82:	4613      	mov	r3, r2
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c92:	f7fc fb01 	bl	8000298 <__aeabi_uldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <UART_SetConfig+0x2d4>)
 8003c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2264      	movs	r2, #100	; 0x64
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	1acb      	subs	r3, r1, r3
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cb2:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <UART_SetConfig+0x2d4>)
 8003cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cc0:	441c      	add	r4, r3
 8003cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ccc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	1891      	adds	r1, r2, r2
 8003cda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	1851      	adds	r1, r2, r1
 8003ce8:	6339      	str	r1, [r7, #48]	; 0x30
 8003cea:	4649      	mov	r1, r9
 8003cec:	414b      	adcs	r3, r1
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	00cb      	lsls	r3, r1, #3
 8003d00:	4651      	mov	r1, sl
 8003d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d06:	4651      	mov	r1, sl
 8003d08:	00ca      	lsls	r2, r1, #3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	4642      	mov	r2, r8
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d18:	464b      	mov	r3, r9
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	eb42 0303 	adc.w	r3, r2, r3
 8003d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d38:	460b      	mov	r3, r1
 8003d3a:	18db      	adds	r3, r3, r3
 8003d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d3e:	4613      	mov	r3, r2
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d4e:	f7fc faa3 	bl	8000298 <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <UART_SetConfig+0x2d4>)
 8003d58:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	2164      	movs	r1, #100	; 0x64
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	3332      	adds	r3, #50	; 0x32
 8003d6a:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <UART_SetConfig+0x2d4>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	f003 0207 	and.w	r2, r3, #7
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4422      	add	r2, r4
 8003d7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d80:	e105      	b.n	8003f8e <UART_SetConfig+0x4d6>
 8003d82:	bf00      	nop
 8003d84:	40011000 	.word	0x40011000
 8003d88:	40011400 	.word	0x40011400
 8003d8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003da2:	4642      	mov	r2, r8
 8003da4:	464b      	mov	r3, r9
 8003da6:	1891      	adds	r1, r2, r2
 8003da8:	6239      	str	r1, [r7, #32]
 8003daa:	415b      	adcs	r3, r3
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
 8003dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003db2:	4641      	mov	r1, r8
 8003db4:	1854      	adds	r4, r2, r1
 8003db6:	4649      	mov	r1, r9
 8003db8:	eb43 0501 	adc.w	r5, r3, r1
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	00eb      	lsls	r3, r5, #3
 8003dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dca:	00e2      	lsls	r2, r4, #3
 8003dcc:	4614      	mov	r4, r2
 8003dce:	461d      	mov	r5, r3
 8003dd0:	4643      	mov	r3, r8
 8003dd2:	18e3      	adds	r3, r4, r3
 8003dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003dd8:	464b      	mov	r3, r9
 8003dda:	eb45 0303 	adc.w	r3, r5, r3
 8003dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dfe:	4629      	mov	r1, r5
 8003e00:	008b      	lsls	r3, r1, #2
 8003e02:	4621      	mov	r1, r4
 8003e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e08:	4621      	mov	r1, r4
 8003e0a:	008a      	lsls	r2, r1, #2
 8003e0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e10:	f7fc fa42 	bl	8000298 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4b60      	ldr	r3, [pc, #384]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	011c      	lsls	r4, r3, #4
 8003e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	1891      	adds	r1, r2, r2
 8003e3a:	61b9      	str	r1, [r7, #24]
 8003e3c:	415b      	adcs	r3, r3
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e44:	4641      	mov	r1, r8
 8003e46:	1851      	adds	r1, r2, r1
 8003e48:	6139      	str	r1, [r7, #16]
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	414b      	adcs	r3, r1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	00cb      	lsls	r3, r1, #3
 8003e60:	4651      	mov	r1, sl
 8003e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e66:	4651      	mov	r1, sl
 8003e68:	00ca      	lsls	r2, r1, #3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4642      	mov	r2, r8
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e78:	464b      	mov	r3, r9
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	eb42 0303 	adc.w	r3, r2, r3
 8003e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e9c:	4649      	mov	r1, r9
 8003e9e:	008b      	lsls	r3, r1, #2
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea6:	4641      	mov	r1, r8
 8003ea8:	008a      	lsls	r2, r1, #2
 8003eaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eae:	f7fc f9f3 	bl	8000298 <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4b39      	ldr	r3, [pc, #228]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	2164      	movs	r1, #100	; 0x64
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	3332      	adds	r3, #50	; 0x32
 8003eca:	4a34      	ldr	r2, [pc, #208]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed6:	441c      	add	r4, r3
 8003ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003edc:	2200      	movs	r2, #0
 8003ede:	673b      	str	r3, [r7, #112]	; 0x70
 8003ee0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ee2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ee6:	4642      	mov	r2, r8
 8003ee8:	464b      	mov	r3, r9
 8003eea:	1891      	adds	r1, r2, r2
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	415b      	adcs	r3, r3
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	1851      	adds	r1, r2, r1
 8003efa:	6039      	str	r1, [r7, #0]
 8003efc:	4649      	mov	r1, r9
 8003efe:	414b      	adcs	r3, r1
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f0e:	4659      	mov	r1, fp
 8003f10:	00cb      	lsls	r3, r1, #3
 8003f12:	4651      	mov	r1, sl
 8003f14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f18:	4651      	mov	r1, sl
 8003f1a:	00ca      	lsls	r2, r1, #3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4603      	mov	r3, r0
 8003f22:	4642      	mov	r2, r8
 8003f24:	189b      	adds	r3, r3, r2
 8003f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f28:	464b      	mov	r3, r9
 8003f2a:	460a      	mov	r2, r1
 8003f2c:	eb42 0303 	adc.w	r3, r2, r3
 8003f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f3c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	008b      	lsls	r3, r1, #2
 8003f4e:	4641      	mov	r1, r8
 8003f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f54:	4641      	mov	r1, r8
 8003f56:	008a      	lsls	r2, r1, #2
 8003f58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f5c:	f7fc f99c 	bl	8000298 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003f66:	fba3 1302 	umull	r1, r3, r3, r2
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2164      	movs	r1, #100	; 0x64
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	3332      	adds	r3, #50	; 0x32
 8003f78:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4422      	add	r2, r4
 8003f8c:	609a      	str	r2, [r3, #8]
}
 8003f8e:	bf00      	nop
 8003f90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f94:	46bd      	mov	sp, r7
 8003f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9a:	bf00      	nop
 8003f9c:	51eb851f 	.word	0x51eb851f

08003fa0 <arm_rfft_fast_init_f32>:
 8003fa0:	084b      	lsrs	r3, r1, #1
 8003fa2:	2b80      	cmp	r3, #128	; 0x80
 8003fa4:	b410      	push	{r4}
 8003fa6:	8201      	strh	r1, [r0, #16]
 8003fa8:	8003      	strh	r3, [r0, #0]
 8003faa:	d047      	beq.n	800403c <arm_rfft_fast_init_f32+0x9c>
 8003fac:	d917      	bls.n	8003fde <arm_rfft_fast_init_f32+0x3e>
 8003fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb2:	d03d      	beq.n	8004030 <arm_rfft_fast_init_f32+0x90>
 8003fb4:	d929      	bls.n	800400a <arm_rfft_fast_init_f32+0x6a>
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d020      	beq.n	8003ffe <arm_rfft_fast_init_f32+0x5e>
 8003fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc0:	d113      	bne.n	8003fea <arm_rfft_fast_init_f32+0x4a>
 8003fc2:	4921      	ldr	r1, [pc, #132]	; (8004048 <arm_rfft_fast_init_f32+0xa8>)
 8003fc4:	4a21      	ldr	r2, [pc, #132]	; (800404c <arm_rfft_fast_init_f32+0xac>)
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <arm_rfft_fast_init_f32+0xb0>)
 8003fc8:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8003fcc:	8184      	strh	r4, [r0, #12]
 8003fce:	6081      	str	r1, [r0, #8]
 8003fd0:	6042      	str	r2, [r0, #4]
 8003fd2:	6143      	str	r3, [r0, #20]
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	b240      	sxtb	r0, r0
 8003fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d01c      	beq.n	800401c <arm_rfft_fast_init_f32+0x7c>
 8003fe2:	2b40      	cmp	r3, #64	; 0x40
 8003fe4:	d006      	beq.n	8003ff4 <arm_rfft_fast_init_f32+0x54>
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d01d      	beq.n	8004026 <arm_rfft_fast_init_f32+0x86>
 8003fea:	20ff      	movs	r0, #255	; 0xff
 8003fec:	b240      	sxtb	r0, r0
 8003fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	2438      	movs	r4, #56	; 0x38
 8003ff6:	4917      	ldr	r1, [pc, #92]	; (8004054 <arm_rfft_fast_init_f32+0xb4>)
 8003ff8:	4a17      	ldr	r2, [pc, #92]	; (8004058 <arm_rfft_fast_init_f32+0xb8>)
 8003ffa:	4b18      	ldr	r3, [pc, #96]	; (800405c <arm_rfft_fast_init_f32+0xbc>)
 8003ffc:	e7e6      	b.n	8003fcc <arm_rfft_fast_init_f32+0x2c>
 8003ffe:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004002:	4917      	ldr	r1, [pc, #92]	; (8004060 <arm_rfft_fast_init_f32+0xc0>)
 8004004:	4a17      	ldr	r2, [pc, #92]	; (8004064 <arm_rfft_fast_init_f32+0xc4>)
 8004006:	4b18      	ldr	r3, [pc, #96]	; (8004068 <arm_rfft_fast_init_f32+0xc8>)
 8004008:	e7e0      	b.n	8003fcc <arm_rfft_fast_init_f32+0x2c>
 800400a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400e:	d1ec      	bne.n	8003fea <arm_rfft_fast_init_f32+0x4a>
 8004010:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004014:	4915      	ldr	r1, [pc, #84]	; (800406c <arm_rfft_fast_init_f32+0xcc>)
 8004016:	4a16      	ldr	r2, [pc, #88]	; (8004070 <arm_rfft_fast_init_f32+0xd0>)
 8004018:	4b16      	ldr	r3, [pc, #88]	; (8004074 <arm_rfft_fast_init_f32+0xd4>)
 800401a:	e7d7      	b.n	8003fcc <arm_rfft_fast_init_f32+0x2c>
 800401c:	2430      	movs	r4, #48	; 0x30
 800401e:	4916      	ldr	r1, [pc, #88]	; (8004078 <arm_rfft_fast_init_f32+0xd8>)
 8004020:	4a16      	ldr	r2, [pc, #88]	; (800407c <arm_rfft_fast_init_f32+0xdc>)
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <arm_rfft_fast_init_f32+0xe0>)
 8004024:	e7d2      	b.n	8003fcc <arm_rfft_fast_init_f32+0x2c>
 8004026:	2414      	movs	r4, #20
 8004028:	4916      	ldr	r1, [pc, #88]	; (8004084 <arm_rfft_fast_init_f32+0xe4>)
 800402a:	4a17      	ldr	r2, [pc, #92]	; (8004088 <arm_rfft_fast_init_f32+0xe8>)
 800402c:	4b17      	ldr	r3, [pc, #92]	; (800408c <arm_rfft_fast_init_f32+0xec>)
 800402e:	e7cd      	b.n	8003fcc <arm_rfft_fast_init_f32+0x2c>
 8004030:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <arm_rfft_fast_init_f32+0xf0>)
 8004036:	4a17      	ldr	r2, [pc, #92]	; (8004094 <arm_rfft_fast_init_f32+0xf4>)
 8004038:	4b17      	ldr	r3, [pc, #92]	; (8004098 <arm_rfft_fast_init_f32+0xf8>)
 800403a:	e7c7      	b.n	8003fcc <arm_rfft_fast_init_f32+0x2c>
 800403c:	24d0      	movs	r4, #208	; 0xd0
 800403e:	4917      	ldr	r1, [pc, #92]	; (800409c <arm_rfft_fast_init_f32+0xfc>)
 8004040:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <arm_rfft_fast_init_f32+0x100>)
 8004042:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <arm_rfft_fast_init_f32+0x104>)
 8004044:	e7c2      	b.n	8003fcc <arm_rfft_fast_init_f32+0x2c>
 8004046:	bf00      	nop
 8004048:	08014128 	.word	0x08014128
 800404c:	08005320 	.word	0x08005320
 8004050:	0800b490 	.word	0x0800b490
 8004054:	08009420 	.word	0x08009420
 8004058:	08015ee8 	.word	0x08015ee8
 800405c:	080183d8 	.word	0x080183d8
 8004060:	08011e10 	.word	0x08011e10
 8004064:	0800fd10 	.word	0x0800fd10
 8004068:	08009490 	.word	0x08009490
 800406c:	08018068 	.word	0x08018068
 8004070:	0800f490 	.word	0x0800f490
 8004074:	080160e8 	.word	0x080160e8
 8004078:	08012cc8 	.word	0x08012cc8
 800407c:	08011d10 	.word	0x08011d10
 8004080:	08009320 	.word	0x08009320
 8004084:	08012c20 	.word	0x08012c20
 8004088:	0800fc90 	.word	0x0800fc90
 800408c:	08012c48 	.word	0x08012c48
 8004090:	080168e8 	.word	0x080168e8
 8004094:	08013128 	.word	0x08013128
 8004098:	08016c68 	.word	0x08016c68
 800409c:	080185d8 	.word	0x080185d8
 80040a0:	08012d28 	.word	0x08012d28
 80040a4:	08017c68 	.word	0x08017c68

080040a8 <arm_rfft_fast_f32>:
 80040a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ac:	8a06      	ldrh	r6, [r0, #16]
 80040ae:	0876      	lsrs	r6, r6, #1
 80040b0:	4607      	mov	r7, r0
 80040b2:	4615      	mov	r5, r2
 80040b4:	8006      	strh	r6, [r0, #0]
 80040b6:	460c      	mov	r4, r1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d15c      	bne.n	8004176 <arm_rfft_fast_f32+0xce>
 80040bc:	461a      	mov	r2, r3
 80040be:	2301      	movs	r3, #1
 80040c0:	f000 fbe6 	bl	8004890 <arm_cfft_f32>
 80040c4:	edd4 7a00 	vldr	s15, [r4]
 80040c8:	ed94 7a01 	vldr	s14, [r4, #4]
 80040cc:	883e      	ldrh	r6, [r7, #0]
 80040ce:	6978      	ldr	r0, [r7, #20]
 80040d0:	ee37 7a07 	vadd.f32	s14, s14, s14
 80040d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040d8:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80040dc:	ee77 6a87 	vadd.f32	s13, s15, s14
 80040e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040e4:	3e01      	subs	r6, #1
 80040e6:	ee26 7aa3 	vmul.f32	s14, s13, s7
 80040ea:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80040ee:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80040f2:	ed85 7a00 	vstr	s14, [r5]
 80040f6:	edc5 7a01 	vstr	s15, [r5, #4]
 80040fa:	3010      	adds	r0, #16
 80040fc:	f105 0210 	add.w	r2, r5, #16
 8004100:	3b08      	subs	r3, #8
 8004102:	f104 0110 	add.w	r1, r4, #16
 8004106:	ed51 4a02 	vldr	s9, [r1, #-8]
 800410a:	ed93 5a02 	vldr	s10, [r3, #8]
 800410e:	ed11 7a01 	vldr	s14, [r1, #-4]
 8004112:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004116:	edd3 5a03 	vldr	s11, [r3, #12]
 800411a:	ed50 6a01 	vldr	s13, [r0, #-4]
 800411e:	ee75 7a64 	vsub.f32	s15, s10, s9
 8004122:	ee35 4a87 	vadd.f32	s8, s11, s14
 8004126:	ee35 5a24 	vadd.f32	s10, s10, s9
 800412a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800412e:	ee66 4a27 	vmul.f32	s9, s12, s15
 8004132:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8004136:	ee34 5a85 	vadd.f32	s10, s9, s10
 800413a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800413e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8004142:	ee77 7a25 	vadd.f32	s15, s14, s11
 8004146:	ee76 6a85 	vadd.f32	s13, s13, s10
 800414a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800414e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004152:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004156:	3e01      	subs	r6, #1
 8004158:	ed42 6a02 	vstr	s13, [r2, #-8]
 800415c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004160:	f1a3 0308 	sub.w	r3, r3, #8
 8004164:	f101 0108 	add.w	r1, r1, #8
 8004168:	f100 0008 	add.w	r0, r0, #8
 800416c:	f102 0208 	add.w	r2, r2, #8
 8004170:	d1c9      	bne.n	8004106 <arm_rfft_fast_f32+0x5e>
 8004172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004176:	edd1 7a00 	vldr	s15, [r1]
 800417a:	edd1 6a01 	vldr	s13, [r1, #4]
 800417e:	6941      	ldr	r1, [r0, #20]
 8004180:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004184:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004188:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800418c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004190:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8004194:	3e01      	subs	r6, #1
 8004196:	ed82 7a00 	vstr	s14, [r2]
 800419a:	edc2 7a01 	vstr	s15, [r2, #4]
 800419e:	00f0      	lsls	r0, r6, #3
 80041a0:	b3ee      	cbz	r6, 800421e <arm_rfft_fast_f32+0x176>
 80041a2:	3808      	subs	r0, #8
 80041a4:	f101 0e10 	add.w	lr, r1, #16
 80041a8:	4420      	add	r0, r4
 80041aa:	f104 0110 	add.w	r1, r4, #16
 80041ae:	f102 0c10 	add.w	ip, r2, #16
 80041b2:	ed90 7a02 	vldr	s14, [r0, #8]
 80041b6:	ed51 6a02 	vldr	s13, [r1, #-8]
 80041ba:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80041be:	ed90 4a03 	vldr	s8, [r0, #12]
 80041c2:	ed11 5a01 	vldr	s10, [r1, #-4]
 80041c6:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80041ca:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80041ce:	ee74 4a05 	vadd.f32	s9, s8, s10
 80041d2:	ee26 3a27 	vmul.f32	s6, s12, s15
 80041d6:	ee77 6a26 	vadd.f32	s13, s14, s13
 80041da:	ee35 5a44 	vsub.f32	s10, s10, s8
 80041de:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80041e2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80041e6:	ee77 7a05 	vadd.f32	s15, s14, s10
 80041ea:	ee26 6a24 	vmul.f32	s12, s12, s9
 80041ee:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80041f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80041f6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80041fa:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80041fe:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004202:	3e01      	subs	r6, #1
 8004204:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8004208:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800420c:	f1a0 0008 	sub.w	r0, r0, #8
 8004210:	f101 0108 	add.w	r1, r1, #8
 8004214:	f10e 0e08 	add.w	lr, lr, #8
 8004218:	f10c 0c08 	add.w	ip, ip, #8
 800421c:	d1c9      	bne.n	80041b2 <arm_rfft_fast_f32+0x10a>
 800421e:	4638      	mov	r0, r7
 8004220:	4629      	mov	r1, r5
 8004222:	461a      	mov	r2, r3
 8004224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004228:	2301      	movs	r3, #1
 800422a:	f000 bb31 	b.w	8004890 <arm_cfft_f32>
 800422e:	bf00      	nop

08004230 <arm_cfft_radix8by2_f32>:
 8004230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004234:	ed2d 8b08 	vpush	{d8-d11}
 8004238:	f8b0 e000 	ldrh.w	lr, [r0]
 800423c:	6842      	ldr	r2, [r0, #4]
 800423e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8004242:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8004246:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800424a:	4607      	mov	r7, r0
 800424c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8004250:	f000 80af 	beq.w	80043b2 <arm_cfft_radix8by2_f32+0x182>
 8004254:	3310      	adds	r3, #16
 8004256:	18ce      	adds	r6, r1, r3
 8004258:	3210      	adds	r2, #16
 800425a:	4443      	add	r3, r8
 800425c:	f101 0510 	add.w	r5, r1, #16
 8004260:	f108 0410 	add.w	r4, r8, #16
 8004264:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004268:	ed13 4a04 	vldr	s8, [r3, #-16]
 800426c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004270:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004274:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004278:	ed54 6a03 	vldr	s13, [r4, #-12]
 800427c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004280:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004284:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004288:	ed15 6a03 	vldr	s12, [r5, #-12]
 800428c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004290:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004294:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004298:	ed56 0a02 	vldr	s1, [r6, #-8]
 800429c:	ed16 1a01 	vldr	s2, [r6, #-4]
 80042a0:	ed55 4a02 	vldr	s9, [r5, #-8]
 80042a4:	ee73 ba21 	vadd.f32	s23, s6, s3
 80042a8:	ee36 ba26 	vadd.f32	s22, s12, s13
 80042ac:	ee37 aa27 	vadd.f32	s20, s14, s15
 80042b0:	ee72 9a04 	vadd.f32	s19, s4, s8
 80042b4:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80042b8:	ee31 8a05 	vadd.f32	s16, s2, s10
 80042bc:	ee74 aa80 	vadd.f32	s21, s9, s0
 80042c0:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80042c4:	ed45 ba04 	vstr	s23, [r5, #-16]
 80042c8:	ed05 ba03 	vstr	s22, [r5, #-12]
 80042cc:	ed45 aa02 	vstr	s21, [r5, #-8]
 80042d0:	ed05 aa01 	vstr	s20, [r5, #-4]
 80042d4:	ed06 8a01 	vstr	s16, [r6, #-4]
 80042d8:	ed46 9a04 	vstr	s19, [r6, #-16]
 80042dc:	ed06 9a03 	vstr	s18, [r6, #-12]
 80042e0:	ed46 8a02 	vstr	s17, [r6, #-8]
 80042e4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80042e8:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80042ec:	ed12 6a03 	vldr	s12, [r2, #-12]
 80042f0:	ed52 2a04 	vldr	s5, [r2, #-16]
 80042f4:	ee33 3a61 	vsub.f32	s6, s6, s3
 80042f8:	ee34 4a42 	vsub.f32	s8, s8, s4
 80042fc:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004300:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004304:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004308:	ee24 4a22 	vmul.f32	s8, s8, s5
 800430c:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004310:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004314:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004318:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800431c:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004320:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004324:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004328:	ee71 2a88 	vadd.f32	s5, s3, s16
 800432c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004330:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004334:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004338:	ed03 6a03 	vstr	s12, [r3, #-12]
 800433c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004340:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004344:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004348:	ed52 5a02 	vldr	s11, [r2, #-8]
 800434c:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004350:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004354:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004358:	ee26 5a87 	vmul.f32	s10, s13, s14
 800435c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004360:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004364:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004368:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800436c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004370:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004374:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004378:	ee74 5a23 	vadd.f32	s11, s8, s7
 800437c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004380:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004384:	f1be 0e01 	subs.w	lr, lr, #1
 8004388:	ed44 5a02 	vstr	s11, [r4, #-8]
 800438c:	f105 0510 	add.w	r5, r5, #16
 8004390:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004394:	f106 0610 	add.w	r6, r6, #16
 8004398:	ed03 6a02 	vstr	s12, [r3, #-8]
 800439c:	ed03 7a01 	vstr	s14, [r3, #-4]
 80043a0:	f102 0210 	add.w	r2, r2, #16
 80043a4:	f104 0410 	add.w	r4, r4, #16
 80043a8:	f103 0310 	add.w	r3, r3, #16
 80043ac:	f47f af5a 	bne.w	8004264 <arm_cfft_radix8by2_f32+0x34>
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	fa1f f48c 	uxth.w	r4, ip
 80043b6:	4608      	mov	r0, r1
 80043b8:	2302      	movs	r3, #2
 80043ba:	4621      	mov	r1, r4
 80043bc:	f000 fae2 	bl	8004984 <arm_radix8_butterfly_f32>
 80043c0:	ecbd 8b08 	vpop	{d8-d11}
 80043c4:	4640      	mov	r0, r8
 80043c6:	4621      	mov	r1, r4
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	2302      	movs	r3, #2
 80043cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043d0:	f000 bad8 	b.w	8004984 <arm_radix8_butterfly_f32>

080043d4 <arm_cfft_radix8by4_f32>:
 80043d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	ed2d 8b0a 	vpush	{d8-d12}
 80043dc:	8802      	ldrh	r2, [r0, #0]
 80043de:	ed91 6a00 	vldr	s12, [r1]
 80043e2:	b08f      	sub	sp, #60	; 0x3c
 80043e4:	460f      	mov	r7, r1
 80043e6:	0852      	lsrs	r2, r2, #1
 80043e8:	0093      	lsls	r3, r2, #2
 80043ea:	900c      	str	r0, [sp, #48]	; 0x30
 80043ec:	9103      	str	r1, [sp, #12]
 80043ee:	6841      	ldr	r1, [r0, #4]
 80043f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80043f4:	4638      	mov	r0, r7
 80043f6:	4418      	add	r0, r3
 80043f8:	4606      	mov	r6, r0
 80043fa:	9009      	str	r0, [sp, #36]	; 0x24
 80043fc:	4418      	add	r0, r3
 80043fe:	edd0 6a00 	vldr	s13, [r0]
 8004402:	edd6 3a00 	vldr	s7, [r6]
 8004406:	edd6 2a01 	vldr	s5, [r6, #4]
 800440a:	edd0 7a01 	vldr	s15, [r0, #4]
 800440e:	900a      	str	r0, [sp, #40]	; 0x28
 8004410:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004414:	4604      	mov	r4, r0
 8004416:	4625      	mov	r5, r4
 8004418:	441c      	add	r4, r3
 800441a:	ed94 4a00 	vldr	s8, [r4]
 800441e:	ed94 5a01 	vldr	s10, [r4, #4]
 8004422:	9401      	str	r4, [sp, #4]
 8004424:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8004428:	4630      	mov	r0, r6
 800442a:	ee74 4a24 	vadd.f32	s9, s8, s9
 800442e:	463e      	mov	r6, r7
 8004430:	ee14 ea90 	vmov	lr, s9
 8004434:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004438:	f846 eb08 	str.w	lr, [r6], #8
 800443c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004440:	edd0 4a01 	vldr	s9, [r0, #4]
 8004444:	9604      	str	r6, [sp, #16]
 8004446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800444a:	9e01      	ldr	r6, [sp, #4]
 800444c:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8004450:	ed96 2a01 	vldr	s4, [r6, #4]
 8004454:	ee36 7a24 	vadd.f32	s14, s12, s9
 8004458:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800445c:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8004460:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004464:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004468:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800446c:	ee73 3a45 	vsub.f32	s7, s6, s10
 8004470:	4604      	mov	r4, r0
 8004472:	ee36 6a45 	vsub.f32	s12, s12, s10
 8004476:	ee75 6a26 	vadd.f32	s13, s10, s13
 800447a:	46a3      	mov	fp, r4
 800447c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004480:	ee34 5a84 	vadd.f32	s10, s9, s8
 8004484:	ee13 8a90 	vmov	r8, s7
 8004488:	46a4      	mov	ip, r4
 800448a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800448e:	ed87 7a01 	vstr	s14, [r7, #4]
 8004492:	f84b 8b08 	str.w	r8, [fp], #8
 8004496:	f1ac 0704 	sub.w	r7, ip, #4
 800449a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800449e:	f101 0c08 	add.w	ip, r1, #8
 80044a2:	462c      	mov	r4, r5
 80044a4:	f8cd c014 	str.w	ip, [sp, #20]
 80044a8:	ee15 ca90 	vmov	ip, s11
 80044ac:	f844 cb08 	str.w	ip, [r4], #8
 80044b0:	9407      	str	r4, [sp, #28]
 80044b2:	f101 0410 	add.w	r4, r1, #16
 80044b6:	ed85 6a01 	vstr	s12, [r5, #4]
 80044ba:	0852      	lsrs	r2, r2, #1
 80044bc:	9402      	str	r4, [sp, #8]
 80044be:	462c      	mov	r4, r5
 80044c0:	f101 0518 	add.w	r5, r1, #24
 80044c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80044c6:	46b2      	mov	sl, r6
 80044c8:	9506      	str	r5, [sp, #24]
 80044ca:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80044ce:	3a02      	subs	r2, #2
 80044d0:	ee16 5a90 	vmov	r5, s13
 80044d4:	46b6      	mov	lr, r6
 80044d6:	4630      	mov	r0, r6
 80044d8:	0852      	lsrs	r2, r2, #1
 80044da:	f84a 5b08 	str.w	r5, [sl], #8
 80044de:	f1a0 0604 	sub.w	r6, r0, #4
 80044e2:	edce 7a01 	vstr	s15, [lr, #4]
 80044e6:	9208      	str	r2, [sp, #32]
 80044e8:	f000 8130 	beq.w	800474c <arm_cfft_radix8by4_f32+0x378>
 80044ec:	4691      	mov	r9, r2
 80044ee:	9a03      	ldr	r2, [sp, #12]
 80044f0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80044f4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80044f8:	3b08      	subs	r3, #8
 80044fa:	f102 0510 	add.w	r5, r2, #16
 80044fe:	f101 0c20 	add.w	ip, r1, #32
 8004502:	f1a4 020c 	sub.w	r2, r4, #12
 8004506:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800450a:	4433      	add	r3, r6
 800450c:	3410      	adds	r4, #16
 800450e:	4650      	mov	r0, sl
 8004510:	4659      	mov	r1, fp
 8004512:	ed55 3a02 	vldr	s7, [r5, #-8]
 8004516:	ed14 5a02 	vldr	s10, [r4, #-8]
 800451a:	ed91 7a00 	vldr	s14, [r1]
 800451e:	edd0 7a00 	vldr	s15, [r0]
 8004522:	ed15 4a01 	vldr	s8, [r5, #-4]
 8004526:	ed54 5a01 	vldr	s11, [r4, #-4]
 800452a:	edd0 6a01 	vldr	s13, [r0, #4]
 800452e:	ed91 6a01 	vldr	s12, [r1, #4]
 8004532:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004536:	ee34 0a25 	vadd.f32	s0, s8, s11
 800453a:	ee78 4a07 	vadd.f32	s9, s16, s14
 800453e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8004542:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8004546:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800454a:	ed45 4a02 	vstr	s9, [r5, #-8]
 800454e:	edd1 4a01 	vldr	s9, [r1, #4]
 8004552:	ed90 4a01 	vldr	s8, [r0, #4]
 8004556:	ee70 4a24 	vadd.f32	s9, s0, s9
 800455a:	ee76 aa05 	vadd.f32	s21, s12, s10
 800455e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004562:	ee35 aac7 	vsub.f32	s20, s11, s14
 8004566:	ed45 4a01 	vstr	s9, [r5, #-4]
 800456a:	edd6 1a00 	vldr	s3, [r6]
 800456e:	edd7 0a00 	vldr	s1, [r7]
 8004572:	ed92 4a02 	vldr	s8, [r2, #8]
 8004576:	edd3 3a02 	vldr	s7, [r3, #8]
 800457a:	ed93 2a01 	vldr	s4, [r3, #4]
 800457e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004582:	edd2 2a01 	vldr	s5, [r2, #4]
 8004586:	ed57 9a01 	vldr	s19, [r7, #-4]
 800458a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800458e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8004592:	ee74 8a84 	vadd.f32	s17, s9, s8
 8004596:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800459a:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800459e:	ee7a aae6 	vsub.f32	s21, s21, s13
 80045a2:	ee18 aa90 	vmov	sl, s17
 80045a6:	f847 a908 	str.w	sl, [r7], #-8
 80045aa:	edd2 8a01 	vldr	s17, [r2, #4]
 80045ae:	ed93 9a01 	vldr	s18, [r3, #4]
 80045b2:	ee73 8a28 	vadd.f32	s17, s6, s17
 80045b6:	ee3a aa27 	vadd.f32	s20, s20, s15
 80045ba:	ee78 8a89 	vadd.f32	s17, s17, s18
 80045be:	ee74 0a63 	vsub.f32	s1, s8, s7
 80045c2:	edc7 8a01 	vstr	s17, [r7, #4]
 80045c6:	ed18 ba02 	vldr	s22, [r8, #-8]
 80045ca:	ed58 8a01 	vldr	s17, [r8, #-4]
 80045ce:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80045d2:	ee6a ba28 	vmul.f32	s23, s20, s17
 80045d6:	ee2a ca8b 	vmul.f32	s24, s21, s22
 80045da:	ee71 9ae2 	vsub.f32	s19, s3, s5
 80045de:	ee30 9a81 	vadd.f32	s18, s1, s2
 80045e2:	ee79 9a82 	vadd.f32	s19, s19, s4
 80045e6:	ee3c ca2b 	vadd.f32	s24, s24, s23
 80045ea:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80045ee:	ee69 baa8 	vmul.f32	s23, s19, s17
 80045f2:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80045f6:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80045fa:	ee69 8a28 	vmul.f32	s17, s18, s17
 80045fe:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8004602:	ee1c aa10 	vmov	sl, s24
 8004606:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800460a:	f841 ab08 	str.w	sl, [r1], #8
 800460e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8004612:	ee3b bacb 	vsub.f32	s22, s23, s22
 8004616:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800461a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800461e:	ed01 aa01 	vstr	s20, [r1, #-4]
 8004622:	edc2 8a01 	vstr	s17, [r2, #4]
 8004626:	ed82 ba02 	vstr	s22, [r2, #8]
 800462a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800462e:	ee74 3a63 	vsub.f32	s7, s8, s7
 8004632:	ee38 8a47 	vsub.f32	s16, s16, s14
 8004636:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800463a:	ee30 0a46 	vsub.f32	s0, s0, s12
 800463e:	ee33 3a42 	vsub.f32	s6, s6, s4
 8004642:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004646:	ee30 0a66 	vsub.f32	s0, s0, s13
 800464a:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800464e:	ee63 8a04 	vmul.f32	s17, s6, s8
 8004652:	ee28 aa24 	vmul.f32	s20, s16, s9
 8004656:	ee60 9a04 	vmul.f32	s19, s0, s8
 800465a:	ee28 8a04 	vmul.f32	s16, s16, s8
 800465e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8004662:	ee63 3a84 	vmul.f32	s7, s7, s8
 8004666:	ee39 4a68 	vsub.f32	s8, s18, s17
 800466a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800466e:	ee14 aa10 	vmov	sl, s8
 8004672:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004676:	ee63 4a24 	vmul.f32	s9, s6, s9
 800467a:	ed44 9a02 	vstr	s19, [r4, #-8]
 800467e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004682:	ed04 0a01 	vstr	s0, [r4, #-4]
 8004686:	f846 a908 	str.w	sl, [r6], #-8
 800468a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800468e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8004692:	edc6 3a01 	vstr	s7, [r6, #4]
 8004696:	ee76 6a86 	vadd.f32	s13, s13, s12
 800469a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800469e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80046a2:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80046a6:	ee67 5a86 	vmul.f32	s11, s15, s12
 80046aa:	ee26 5a87 	vmul.f32	s10, s13, s14
 80046ae:	ee72 2a62 	vsub.f32	s5, s4, s5
 80046b2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80046b6:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80046ba:	ee75 5a25 	vadd.f32	s11, s10, s11
 80046be:	ee62 0a86 	vmul.f32	s1, s5, s12
 80046c2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80046c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ca:	ee21 6a06 	vmul.f32	s12, s2, s12
 80046ce:	ee62 2a87 	vmul.f32	s5, s5, s14
 80046d2:	ee21 1a07 	vmul.f32	s2, s2, s14
 80046d6:	ee15 aa90 	vmov	sl, s11
 80046da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80046de:	f840 ab08 	str.w	sl, [r0], #8
 80046e2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80046e6:	ee76 2a22 	vadd.f32	s5, s12, s5
 80046ea:	f1b9 0901 	subs.w	r9, r9, #1
 80046ee:	ed40 7a01 	vstr	s15, [r0, #-4]
 80046f2:	f105 0508 	add.w	r5, r5, #8
 80046f6:	ed83 1a02 	vstr	s2, [r3, #8]
 80046fa:	edc3 2a01 	vstr	s5, [r3, #4]
 80046fe:	f108 0808 	add.w	r8, r8, #8
 8004702:	f1a2 0208 	sub.w	r2, r2, #8
 8004706:	f10c 0c10 	add.w	ip, ip, #16
 800470a:	f104 0408 	add.w	r4, r4, #8
 800470e:	f10e 0e18 	add.w	lr, lr, #24
 8004712:	f1a3 0308 	sub.w	r3, r3, #8
 8004716:	f47f aefc 	bne.w	8004512 <arm_cfft_radix8by4_f32+0x13e>
 800471a:	9908      	ldr	r1, [sp, #32]
 800471c:	9802      	ldr	r0, [sp, #8]
 800471e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004722:	00cb      	lsls	r3, r1, #3
 8004724:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004728:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800472c:	9102      	str	r1, [sp, #8]
 800472e:	9904      	ldr	r1, [sp, #16]
 8004730:	4419      	add	r1, r3
 8004732:	9104      	str	r1, [sp, #16]
 8004734:	9905      	ldr	r1, [sp, #20]
 8004736:	4419      	add	r1, r3
 8004738:	9105      	str	r1, [sp, #20]
 800473a:	9907      	ldr	r1, [sp, #28]
 800473c:	449b      	add	fp, r3
 800473e:	4419      	add	r1, r3
 8004740:	449a      	add	sl, r3
 8004742:	9b06      	ldr	r3, [sp, #24]
 8004744:	9107      	str	r1, [sp, #28]
 8004746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800474a:	9306      	str	r3, [sp, #24]
 800474c:	9a04      	ldr	r2, [sp, #16]
 800474e:	9807      	ldr	r0, [sp, #28]
 8004750:	edd2 3a00 	vldr	s7, [r2]
 8004754:	ed90 4a00 	vldr	s8, [r0]
 8004758:	eddb 7a00 	vldr	s15, [fp]
 800475c:	ed9a 3a00 	vldr	s6, [sl]
 8004760:	edd2 4a01 	vldr	s9, [r2, #4]
 8004764:	ed90 7a01 	vldr	s14, [r0, #4]
 8004768:	ed9b 2a01 	vldr	s4, [fp, #4]
 800476c:	edda 5a01 	vldr	s11, [sl, #4]
 8004770:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8004774:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004776:	ee73 6a84 	vadd.f32	s13, s7, s8
 800477a:	ee34 6a87 	vadd.f32	s12, s9, s14
 800477e:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8004782:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8004786:	ee33 5a05 	vadd.f32	s10, s6, s10
 800478a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800478e:	ed82 5a00 	vstr	s10, [r2]
 8004792:	ed9b 5a01 	vldr	s10, [fp, #4]
 8004796:	edda 4a01 	vldr	s9, [sl, #4]
 800479a:	ee36 5a05 	vadd.f32	s10, s12, s10
 800479e:	ee72 3a04 	vadd.f32	s7, s4, s8
 80047a2:	ee35 5a24 	vadd.f32	s10, s10, s9
 80047a6:	ee77 4a67 	vsub.f32	s9, s14, s15
 80047aa:	ed82 5a01 	vstr	s10, [r2, #4]
 80047ae:	9a05      	ldr	r2, [sp, #20]
 80047b0:	ee34 5a83 	vadd.f32	s10, s9, s6
 80047b4:	edd2 1a00 	vldr	s3, [r2]
 80047b8:	edd2 2a01 	vldr	s5, [r2, #4]
 80047bc:	9a02      	ldr	r2, [sp, #8]
 80047be:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80047c2:	ee36 6a42 	vsub.f32	s12, s12, s4
 80047c6:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80047ca:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80047ce:	ee65 2a22 	vmul.f32	s5, s10, s5
 80047d2:	ee25 5a21 	vmul.f32	s10, s10, s3
 80047d6:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80047da:	ee35 5a63 	vsub.f32	s10, s10, s7
 80047de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80047e2:	edcb 2a00 	vstr	s5, [fp]
 80047e6:	ed8b 5a01 	vstr	s10, [fp, #4]
 80047ea:	edd2 3a01 	vldr	s7, [r2, #4]
 80047ee:	ed92 5a00 	vldr	s10, [r2]
 80047f2:	9a06      	ldr	r2, [sp, #24]
 80047f4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80047f8:	ee36 6a65 	vsub.f32	s12, s12, s11
 80047fc:	ee66 4a85 	vmul.f32	s9, s13, s10
 8004800:	ee26 5a05 	vmul.f32	s10, s12, s10
 8004804:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8004808:	ee26 6a23 	vmul.f32	s12, s12, s7
 800480c:	ee75 6a66 	vsub.f32	s13, s10, s13
 8004810:	ee34 6a86 	vadd.f32	s12, s9, s12
 8004814:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800481c:	edc0 6a01 	vstr	s13, [r0, #4]
 8004820:	ed80 6a00 	vstr	s12, [r0]
 8004824:	ed92 6a01 	vldr	s12, [r2, #4]
 8004828:	9803      	ldr	r0, [sp, #12]
 800482a:	ee77 7a43 	vsub.f32	s15, s14, s6
 800482e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8004832:	ed92 7a00 	vldr	s14, [r2]
 8004836:	ee65 6a87 	vmul.f32	s13, s11, s14
 800483a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800483e:	ee65 5a86 	vmul.f32	s11, s11, s12
 8004842:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004846:	ee77 5a65 	vsub.f32	s11, s14, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	edca 5a01 	vstr	s11, [sl, #4]
 8004852:	edca 7a00 	vstr	s15, [sl]
 8004856:	6872      	ldr	r2, [r6, #4]
 8004858:	4621      	mov	r1, r4
 800485a:	2304      	movs	r3, #4
 800485c:	f000 f892 	bl	8004984 <arm_radix8_butterfly_f32>
 8004860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004862:	6872      	ldr	r2, [r6, #4]
 8004864:	4621      	mov	r1, r4
 8004866:	2304      	movs	r3, #4
 8004868:	f000 f88c 	bl	8004984 <arm_radix8_butterfly_f32>
 800486c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800486e:	6872      	ldr	r2, [r6, #4]
 8004870:	4621      	mov	r1, r4
 8004872:	2304      	movs	r3, #4
 8004874:	f000 f886 	bl	8004984 <arm_radix8_butterfly_f32>
 8004878:	9801      	ldr	r0, [sp, #4]
 800487a:	6872      	ldr	r2, [r6, #4]
 800487c:	4621      	mov	r1, r4
 800487e:	2304      	movs	r3, #4
 8004880:	b00f      	add	sp, #60	; 0x3c
 8004882:	ecbd 8b0a 	vpop	{d8-d12}
 8004886:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488a:	f000 b87b 	b.w	8004984 <arm_radix8_butterfly_f32>
 800488e:	bf00      	nop

08004890 <arm_cfft_f32>:
 8004890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004894:	2a01      	cmp	r2, #1
 8004896:	4606      	mov	r6, r0
 8004898:	4617      	mov	r7, r2
 800489a:	460c      	mov	r4, r1
 800489c:	4698      	mov	r8, r3
 800489e:	8805      	ldrh	r5, [r0, #0]
 80048a0:	d054      	beq.n	800494c <arm_cfft_f32+0xbc>
 80048a2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80048a6:	d04c      	beq.n	8004942 <arm_cfft_f32+0xb2>
 80048a8:	d916      	bls.n	80048d8 <arm_cfft_f32+0x48>
 80048aa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80048ae:	d01a      	beq.n	80048e6 <arm_cfft_f32+0x56>
 80048b0:	d95c      	bls.n	800496c <arm_cfft_f32+0xdc>
 80048b2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80048b6:	d044      	beq.n	8004942 <arm_cfft_f32+0xb2>
 80048b8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80048bc:	d105      	bne.n	80048ca <arm_cfft_f32+0x3a>
 80048be:	4620      	mov	r0, r4
 80048c0:	4629      	mov	r1, r5
 80048c2:	6872      	ldr	r2, [r6, #4]
 80048c4:	2301      	movs	r3, #1
 80048c6:	f000 f85d 	bl	8004984 <arm_radix8_butterfly_f32>
 80048ca:	f1b8 0f00 	cmp.w	r8, #0
 80048ce:	d111      	bne.n	80048f4 <arm_cfft_f32+0x64>
 80048d0:	2f01      	cmp	r7, #1
 80048d2:	d016      	beq.n	8004902 <arm_cfft_f32+0x72>
 80048d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d8:	2d20      	cmp	r5, #32
 80048da:	d032      	beq.n	8004942 <arm_cfft_f32+0xb2>
 80048dc:	d94a      	bls.n	8004974 <arm_cfft_f32+0xe4>
 80048de:	2d40      	cmp	r5, #64	; 0x40
 80048e0:	d0ed      	beq.n	80048be <arm_cfft_f32+0x2e>
 80048e2:	2d80      	cmp	r5, #128	; 0x80
 80048e4:	d1f1      	bne.n	80048ca <arm_cfft_f32+0x3a>
 80048e6:	4630      	mov	r0, r6
 80048e8:	4621      	mov	r1, r4
 80048ea:	f7ff fca1 	bl	8004230 <arm_cfft_radix8by2_f32>
 80048ee:	f1b8 0f00 	cmp.w	r8, #0
 80048f2:	d0ed      	beq.n	80048d0 <arm_cfft_f32+0x40>
 80048f4:	4620      	mov	r0, r4
 80048f6:	89b1      	ldrh	r1, [r6, #12]
 80048f8:	68b2      	ldr	r2, [r6, #8]
 80048fa:	f7fb fc6d 	bl	80001d8 <arm_bitreversal_32>
 80048fe:	2f01      	cmp	r7, #1
 8004900:	d1e8      	bne.n	80048d4 <arm_cfft_f32+0x44>
 8004902:	ee07 5a90 	vmov	s15, r5
 8004906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800490e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8004912:	2d00      	cmp	r5, #0
 8004914:	d0de      	beq.n	80048d4 <arm_cfft_f32+0x44>
 8004916:	f104 0108 	add.w	r1, r4, #8
 800491a:	2300      	movs	r3, #0
 800491c:	3301      	adds	r3, #1
 800491e:	429d      	cmp	r5, r3
 8004920:	f101 0108 	add.w	r1, r1, #8
 8004924:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004928:	ed51 7a03 	vldr	s15, [r1, #-12]
 800492c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004930:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004934:	ed01 7a04 	vstr	s14, [r1, #-16]
 8004938:	ed41 7a03 	vstr	s15, [r1, #-12]
 800493c:	d1ee      	bne.n	800491c <arm_cfft_f32+0x8c>
 800493e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004942:	4630      	mov	r0, r6
 8004944:	4621      	mov	r1, r4
 8004946:	f7ff fd45 	bl	80043d4 <arm_cfft_radix8by4_f32>
 800494a:	e7be      	b.n	80048ca <arm_cfft_f32+0x3a>
 800494c:	b1ad      	cbz	r5, 800497a <arm_cfft_f32+0xea>
 800494e:	f101 030c 	add.w	r3, r1, #12
 8004952:	2200      	movs	r2, #0
 8004954:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004958:	3201      	adds	r2, #1
 800495a:	eef1 7a67 	vneg.f32	s15, s15
 800495e:	4295      	cmp	r5, r2
 8004960:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004964:	f103 0308 	add.w	r3, r3, #8
 8004968:	d1f4      	bne.n	8004954 <arm_cfft_f32+0xc4>
 800496a:	e79a      	b.n	80048a2 <arm_cfft_f32+0x12>
 800496c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004970:	d0a5      	beq.n	80048be <arm_cfft_f32+0x2e>
 8004972:	e7aa      	b.n	80048ca <arm_cfft_f32+0x3a>
 8004974:	2d10      	cmp	r5, #16
 8004976:	d0b6      	beq.n	80048e6 <arm_cfft_f32+0x56>
 8004978:	e7a7      	b.n	80048ca <arm_cfft_f32+0x3a>
 800497a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800497e:	d894      	bhi.n	80048aa <arm_cfft_f32+0x1a>
 8004980:	e7aa      	b.n	80048d8 <arm_cfft_f32+0x48>
 8004982:	bf00      	nop

08004984 <arm_radix8_butterfly_f32>:
 8004984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004988:	ed2d 8b10 	vpush	{d8-d15}
 800498c:	b09d      	sub	sp, #116	; 0x74
 800498e:	461c      	mov	r4, r3
 8004990:	ed9f bac8 	vldr	s22, [pc, #800]	; 8004cb4 <arm_radix8_butterfly_f32+0x330>
 8004994:	921a      	str	r2, [sp, #104]	; 0x68
 8004996:	1d03      	adds	r3, r0, #4
 8004998:	4682      	mov	sl, r0
 800499a:	4689      	mov	r9, r1
 800499c:	468b      	mov	fp, r1
 800499e:	931b      	str	r3, [sp, #108]	; 0x6c
 80049a0:	9400      	str	r4, [sp, #0]
 80049a2:	469e      	mov	lr, r3
 80049a4:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80049a8:	005a      	lsls	r2, r3, #1
 80049aa:	18d6      	adds	r6, r2, r3
 80049ac:	18f5      	adds	r5, r6, r3
 80049ae:	9203      	str	r2, [sp, #12]
 80049b0:	195a      	adds	r2, r3, r5
 80049b2:	18d0      	adds	r0, r2, r3
 80049b4:	00df      	lsls	r7, r3, #3
 80049b6:	1819      	adds	r1, r3, r0
 80049b8:	463c      	mov	r4, r7
 80049ba:	9701      	str	r7, [sp, #4]
 80049bc:	4457      	add	r7, sl
 80049be:	930c      	str	r3, [sp, #48]	; 0x30
 80049c0:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 80049ca:	eb07 0c04 	add.w	ip, r7, r4
 80049ce:	9c00      	ldr	r4, [sp, #0]
 80049d0:	9302      	str	r3, [sp, #8]
 80049d2:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 80049d6:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80049da:	3204      	adds	r2, #4
 80049dc:	3104      	adds	r1, #4
 80049de:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 80049e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049e6:	f04f 0800 	mov.w	r8, #0
 80049ea:	eddc 7a00 	vldr	s15, [ip]
 80049ee:	edd7 6a00 	vldr	s13, [r7]
 80049f2:	edd6 3a00 	vldr	s7, [r6]
 80049f6:	ed5e aa01 	vldr	s21, [lr, #-4]
 80049fa:	edd5 4a00 	vldr	s9, [r5]
 80049fe:	ed90 2a00 	vldr	s4, [r0]
 8004a02:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004a06:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004a0a:	ee77 8a82 	vadd.f32	s17, s15, s4
 8004a0e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8004a12:	ee76 1a87 	vadd.f32	s3, s13, s14
 8004a16:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8004a1a:	ee31 6a84 	vadd.f32	s12, s3, s8
 8004a1e:	ee33 5a28 	vadd.f32	s10, s6, s17
 8004a22:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004a26:	ee75 6a06 	vadd.f32	s13, s10, s12
 8004a2a:	ee35 5a46 	vsub.f32	s10, s10, s12
 8004a2e:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8004a32:	ed85 5a00 	vstr	s10, [r5]
 8004a36:	ed96 1a01 	vldr	s2, [r6, #4]
 8004a3a:	edd7 5a01 	vldr	s11, [r7, #4]
 8004a3e:	ed92 aa00 	vldr	s20, [r2]
 8004a42:	ed91 6a00 	vldr	s12, [r1]
 8004a46:	ed9e 9a00 	vldr	s18, [lr]
 8004a4a:	ed95 5a01 	vldr	s10, [r5, #4]
 8004a4e:	eddc 6a01 	vldr	s13, [ip, #4]
 8004a52:	edd0 9a01 	vldr	s19, [r0, #4]
 8004a56:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8004a5a:	ee71 2a46 	vsub.f32	s5, s2, s12
 8004a5e:	ee75 3aca 	vsub.f32	s7, s11, s20
 8004a62:	ee37 0a60 	vsub.f32	s0, s14, s1
 8004a66:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8004a6a:	ee37 7a20 	vadd.f32	s14, s14, s1
 8004a6e:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8004a72:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8004a76:	ee79 3a05 	vadd.f32	s7, s18, s10
 8004a7a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8004a7e:	ee39 5a45 	vsub.f32	s10, s18, s10
 8004a82:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8004a86:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004a8a:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8004a8e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004a92:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004a96:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004a9a:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8004a9e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8004aa2:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004aa6:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004aaa:	ee75 8a86 	vadd.f32	s17, s11, s12
 8004aae:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8004ab2:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8004ab6:	ee75 6a62 	vsub.f32	s13, s10, s5
 8004aba:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8004abe:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004ac2:	ee33 1a89 	vadd.f32	s2, s7, s18
 8004ac6:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8004aca:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004ace:	ee75 4a22 	vadd.f32	s9, s10, s5
 8004ad2:	ee32 5a27 	vadd.f32	s10, s4, s15
 8004ad6:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004ada:	ee33 8a06 	vadd.f32	s16, s6, s12
 8004ade:	ee75 2a87 	vadd.f32	s5, s11, s14
 8004ae2:	ee31 9a28 	vadd.f32	s18, s2, s17
 8004ae6:	ee33 6a46 	vsub.f32	s12, s6, s12
 8004aea:	ee74 0a61 	vsub.f32	s1, s8, s3
 8004aee:	ee33 2a80 	vadd.f32	s4, s7, s0
 8004af2:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004af6:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8004afa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004afe:	ee31 1a68 	vsub.f32	s2, s2, s17
 8004b02:	ee34 4a21 	vadd.f32	s8, s8, s3
 8004b06:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004b0a:	ee74 4a85 	vadd.f32	s9, s9, s10
 8004b0e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004b12:	44d8      	add	r8, fp
 8004b14:	45c1      	cmp	r9, r8
 8004b16:	ed8e 9a00 	vstr	s18, [lr]
 8004b1a:	ed85 1a01 	vstr	s2, [r5, #4]
 8004b1e:	449e      	add	lr, r3
 8004b20:	ed8c 8a00 	vstr	s16, [ip]
 8004b24:	441d      	add	r5, r3
 8004b26:	ed80 6a00 	vstr	s12, [r0]
 8004b2a:	edcc 0a01 	vstr	s1, [ip, #4]
 8004b2e:	ed80 4a01 	vstr	s8, [r0, #4]
 8004b32:	449c      	add	ip, r3
 8004b34:	ed87 2a00 	vstr	s4, [r7]
 8004b38:	4418      	add	r0, r3
 8004b3a:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004b3e:	ed42 2a01 	vstr	s5, [r2, #-4]
 8004b42:	ed86 7a00 	vstr	s14, [r6]
 8004b46:	ed87 3a01 	vstr	s6, [r7, #4]
 8004b4a:	edc1 4a00 	vstr	s9, [r1]
 8004b4e:	441f      	add	r7, r3
 8004b50:	edc2 5a00 	vstr	s11, [r2]
 8004b54:	4419      	add	r1, r3
 8004b56:	edc6 6a01 	vstr	s13, [r6, #4]
 8004b5a:	441a      	add	r2, r3
 8004b5c:	441e      	add	r6, r3
 8004b5e:	f63f af44 	bhi.w	80049ea <arm_radix8_butterfly_f32+0x66>
 8004b62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b64:	2907      	cmp	r1, #7
 8004b66:	4620      	mov	r0, r4
 8004b68:	f240 81e9 	bls.w	8004f3e <arm_radix8_butterfly_f32+0x5ba>
 8004b6c:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8004b70:	193e      	adds	r6, r7, r4
 8004b72:	1935      	adds	r5, r6, r4
 8004b74:	9c03      	ldr	r4, [sp, #12]
 8004b76:	9000      	str	r0, [sp, #0]
 8004b78:	4622      	mov	r2, r4
 8004b7a:	3201      	adds	r2, #1
 8004b7c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004b80:	9900      	ldr	r1, [sp, #0]
 8004b82:	1828      	adds	r0, r5, r0
 8004b84:	eb00 0e01 	add.w	lr, r0, r1
 8004b88:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b8a:	440a      	add	r2, r1
 8004b8c:	eb04 0c01 	add.w	ip, r4, r1
 8004b90:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8004b94:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8004b98:	9a00      	ldr	r2, [sp, #0]
 8004b9a:	940f      	str	r4, [sp, #60]	; 0x3c
 8004b9c:	00ed      	lsls	r5, r5, #3
 8004b9e:	9511      	str	r5, [sp, #68]	; 0x44
 8004ba0:	00d5      	lsls	r5, r2, #3
 8004ba2:	950d      	str	r5, [sp, #52]	; 0x34
 8004ba4:	9d01      	ldr	r5, [sp, #4]
 8004ba6:	3508      	adds	r5, #8
 8004ba8:	9516      	str	r5, [sp, #88]	; 0x58
 8004baa:	9d02      	ldr	r5, [sp, #8]
 8004bac:	3508      	adds	r5, #8
 8004bae:	0114      	lsls	r4, r2, #4
 8004bb0:	9517      	str	r5, [sp, #92]	; 0x5c
 8004bb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bb4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004bb6:	940e      	str	r4, [sp, #56]	; 0x38
 8004bb8:	00c0      	lsls	r0, r0, #3
 8004bba:	9010      	str	r0, [sp, #64]	; 0x40
 8004bbc:	18aa      	adds	r2, r5, r2
 8004bbe:	9207      	str	r2, [sp, #28]
 8004bc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bc2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004bc4:	18aa      	adds	r2, r5, r2
 8004bc6:	9208      	str	r2, [sp, #32]
 8004bc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004bca:	18aa      	adds	r2, r5, r2
 8004bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8004bce:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004bd2:	f10e 0204 	add.w	r2, lr, #4
 8004bd6:	920a      	str	r2, [sp, #40]	; 0x28
 8004bd8:	00c9      	lsls	r1, r1, #3
 8004bda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004bdc:	310c      	adds	r1, #12
 8004bde:	00f6      	lsls	r6, r6, #3
 8004be0:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8004be4:	9114      	str	r1, [sp, #80]	; 0x50
 8004be6:	18a9      	adds	r1, r5, r2
 8004be8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bea:	9612      	str	r6, [sp, #72]	; 0x48
 8004bec:	00ff      	lsls	r7, r7, #3
 8004bee:	19ae      	adds	r6, r5, r6
 8004bf0:	3008      	adds	r0, #8
 8004bf2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8004bf6:	9606      	str	r6, [sp, #24]
 8004bf8:	9019      	str	r0, [sp, #100]	; 0x64
 8004bfa:	18aa      	adds	r2, r5, r2
 8004bfc:	0164      	lsls	r4, r4, #5
 8004bfe:	19ee      	adds	r6, r5, r7
 8004c00:	f10c 000c 	add.w	r0, ip, #12
 8004c04:	9713      	str	r7, [sp, #76]	; 0x4c
 8004c06:	9604      	str	r6, [sp, #16]
 8004c08:	9015      	str	r0, [sp, #84]	; 0x54
 8004c0a:	9103      	str	r1, [sp, #12]
 8004c0c:	9205      	str	r2, [sp, #20]
 8004c0e:	f104 0208 	add.w	r2, r4, #8
 8004c12:	9218      	str	r2, [sp, #96]	; 0x60
 8004c14:	f04f 0801 	mov.w	r8, #1
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f102 0108 	add.w	r1, r2, #8
 8004c1e:	460f      	mov	r7, r1
 8004c20:	910b      	str	r1, [sp, #44]	; 0x2c
 8004c22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004c24:	188e      	adds	r6, r1, r2
 8004c26:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004c28:	188d      	adds	r5, r1, r2
 8004c2a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004c2c:	188c      	adds	r4, r1, r2
 8004c2e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004c30:	1888      	adds	r0, r1, r2
 8004c32:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004c34:	eb01 0c02 	add.w	ip, r1, r2
 8004c38:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004c3a:	440a      	add	r2, r1
 8004c3c:	9903      	ldr	r1, [sp, #12]
 8004c3e:	edd1 fa00 	vldr	s31, [r1]
 8004c42:	9905      	ldr	r1, [sp, #20]
 8004c44:	ed91 fa00 	vldr	s30, [r1]
 8004c48:	9904      	ldr	r1, [sp, #16]
 8004c4a:	edd1 ea00 	vldr	s29, [r1]
 8004c4e:	9906      	ldr	r1, [sp, #24]
 8004c50:	ed91 ea00 	vldr	s28, [r1]
 8004c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c56:	edd1 da00 	vldr	s27, [r1]
 8004c5a:	9908      	ldr	r1, [sp, #32]
 8004c5c:	ed91 da00 	vldr	s26, [r1]
 8004c60:	9907      	ldr	r1, [sp, #28]
 8004c62:	edd1 ca00 	vldr	s25, [r1]
 8004c66:	9903      	ldr	r1, [sp, #12]
 8004c68:	ed91 ca01 	vldr	s24, [r1, #4]
 8004c6c:	9905      	ldr	r1, [sp, #20]
 8004c6e:	edd1 ba01 	vldr	s23, [r1, #4]
 8004c72:	9904      	ldr	r1, [sp, #16]
 8004c74:	edd1 aa01 	vldr	s21, [r1, #4]
 8004c78:	9906      	ldr	r1, [sp, #24]
 8004c7a:	ed91 aa01 	vldr	s20, [r1, #4]
 8004c7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c80:	edd1 7a01 	vldr	s15, [r1, #4]
 8004c84:	9908      	ldr	r1, [sp, #32]
 8004c86:	edcd 7a00 	vstr	s15, [sp]
 8004c8a:	edd1 7a01 	vldr	s15, [r1, #4]
 8004c8e:	9907      	ldr	r1, [sp, #28]
 8004c90:	edcd 7a01 	vstr	s15, [sp, #4]
 8004c94:	edd1 7a01 	vldr	s15, [r1, #4]
 8004c98:	eb0a 0e07 	add.w	lr, sl, r7
 8004c9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004c9e:	edcd 7a02 	vstr	s15, [sp, #8]
 8004ca2:	eb0c 010a 	add.w	r1, ip, sl
 8004ca6:	4456      	add	r6, sl
 8004ca8:	4455      	add	r5, sl
 8004caa:	4454      	add	r4, sl
 8004cac:	4450      	add	r0, sl
 8004cae:	4452      	add	r2, sl
 8004cb0:	46c4      	mov	ip, r8
 8004cb2:	e001      	b.n	8004cb8 <arm_radix8_butterfly_f32+0x334>
 8004cb4:	3f3504f3 	.word	0x3f3504f3
 8004cb8:	ed96 5a00 	vldr	s10, [r6]
 8004cbc:	ed52 9a01 	vldr	s19, [r2, #-4]
 8004cc0:	ed11 6a01 	vldr	s12, [r1, #-4]
 8004cc4:	edd0 7a00 	vldr	s15, [r0]
 8004cc8:	ed17 7a01 	vldr	s14, [r7, #-4]
 8004ccc:	edde 3a00 	vldr	s7, [lr]
 8004cd0:	ed94 3a00 	vldr	s6, [r4]
 8004cd4:	ed95 2a00 	vldr	s4, [r5]
 8004cd8:	ed9e 0a01 	vldr	s0, [lr, #4]
 8004cdc:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004ce0:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004ce4:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004ce8:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004cec:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004cf0:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004cf4:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004cf8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004cfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d00:	ed8e 6a00 	vstr	s12, [lr]
 8004d04:	edd0 8a01 	vldr	s17, [r0, #4]
 8004d08:	ed95 9a01 	vldr	s18, [r5, #4]
 8004d0c:	edd1 2a00 	vldr	s5, [r1]
 8004d10:	ed97 7a00 	vldr	s14, [r7]
 8004d14:	edd4 0a01 	vldr	s1, [r4, #4]
 8004d18:	ed96 6a01 	vldr	s12, [r6, #4]
 8004d1c:	edd2 5a00 	vldr	s11, [r2]
 8004d20:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004d24:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004d28:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004d2c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004d30:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004d34:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004d38:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004d3c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004d40:	ee75 8a69 	vsub.f32	s17, s10, s19
 8004d44:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004d48:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004d4c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004d50:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004d54:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8004d58:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004d5c:	ee32 9a08 	vadd.f32	s18, s4, s16
 8004d60:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004d64:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004d68:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004d6c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004d70:	ee32 1a87 	vadd.f32	s2, s5, s14
 8004d74:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004d78:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004d7c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004d80:	ee73 0a29 	vadd.f32	s1, s6, s19
 8004d84:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004d88:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004d8c:	ee32 7a64 	vsub.f32	s14, s4, s9
 8004d90:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8004d94:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004d98:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004d9c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8004da0:	ee74 3a22 	vadd.f32	s7, s8, s5
 8004da4:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8004da8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004dac:	ee79 1a41 	vsub.f32	s3, s18, s2
 8004db0:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8004db4:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004db8:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004dbc:	ee72 4a24 	vadd.f32	s9, s4, s9
 8004dc0:	ee30 4a60 	vsub.f32	s8, s0, s1
 8004dc4:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004dc8:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004dcc:	ee77 9a85 	vadd.f32	s19, s15, s10
 8004dd0:	ee36 6a03 	vadd.f32	s12, s12, s6
 8004dd4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004dd8:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004ddc:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8004de0:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8004de4:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004de8:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004dec:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8004df0:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8004df4:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004df8:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004dfc:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004e00:	ee35 3a03 	vadd.f32	s6, s10, s6
 8004e04:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004e08:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004e0c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004e10:	ed9d 4a02 	vldr	s8, [sp, #8]
 8004e14:	ed8e 1a01 	vstr	s2, [lr, #4]
 8004e18:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004e1c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004e20:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004e24:	ed86 3a00 	vstr	s6, [r6]
 8004e28:	ee30 9a89 	vadd.f32	s18, s1, s18
 8004e2c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8004e30:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8004e34:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8004e38:	ee67 2a22 	vmul.f32	s5, s14, s5
 8004e3c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8004e40:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004e44:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8004e48:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8004e4c:	ee64 8a28 	vmul.f32	s17, s8, s17
 8004e50:	ed9d 4a00 	vldr	s8, [sp]
 8004e54:	edc6 6a01 	vstr	s13, [r6, #4]
 8004e58:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004e5c:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8004e60:	ee64 9a29 	vmul.f32	s19, s8, s19
 8004e64:	ee24 4a25 	vmul.f32	s8, s8, s11
 8004e68:	ee30 7a87 	vadd.f32	s14, s1, s14
 8004e6c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004e70:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8004e74:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8004e78:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8004e7c:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8004e80:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8004e84:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8004e88:	ee75 1a21 	vadd.f32	s3, s10, s3
 8004e8c:	ee30 0a68 	vsub.f32	s0, s0, s17
 8004e90:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8004e94:	ee70 0a84 	vadd.f32	s1, s1, s8
 8004e98:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004e9c:	44dc      	add	ip, fp
 8004e9e:	45e1      	cmp	r9, ip
 8004ea0:	ed84 9a00 	vstr	s18, [r4]
 8004ea4:	edc4 3a01 	vstr	s7, [r4, #4]
 8004ea8:	449e      	add	lr, r3
 8004eaa:	ed02 7a01 	vstr	s14, [r2, #-4]
 8004eae:	edc2 2a00 	vstr	s5, [r2]
 8004eb2:	441e      	add	r6, r3
 8004eb4:	ed85 2a00 	vstr	s4, [r5]
 8004eb8:	ed85 8a01 	vstr	s16, [r5, #4]
 8004ebc:	441c      	add	r4, r3
 8004ebe:	ed47 1a01 	vstr	s3, [r7, #-4]
 8004ec2:	ed87 0a00 	vstr	s0, [r7]
 8004ec6:	441a      	add	r2, r3
 8004ec8:	ed41 4a01 	vstr	s9, [r1, #-4]
 8004ecc:	edc1 9a00 	vstr	s19, [r1]
 8004ed0:	441d      	add	r5, r3
 8004ed2:	edc0 0a00 	vstr	s1, [r0]
 8004ed6:	441f      	add	r7, r3
 8004ed8:	ed80 6a01 	vstr	s12, [r0, #4]
 8004edc:	4419      	add	r1, r3
 8004ede:	4418      	add	r0, r3
 8004ee0:	f63f aeea 	bhi.w	8004cb8 <arm_radix8_butterfly_f32+0x334>
 8004ee4:	9a03      	ldr	r2, [sp, #12]
 8004ee6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ee8:	440a      	add	r2, r1
 8004eea:	9203      	str	r2, [sp, #12]
 8004eec:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004eee:	9a05      	ldr	r2, [sp, #20]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	9205      	str	r2, [sp, #20]
 8004ef4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004ef6:	9a04      	ldr	r2, [sp, #16]
 8004ef8:	440a      	add	r2, r1
 8004efa:	9204      	str	r2, [sp, #16]
 8004efc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004efe:	9a06      	ldr	r2, [sp, #24]
 8004f00:	440a      	add	r2, r1
 8004f02:	9206      	str	r2, [sp, #24]
 8004f04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f08:	440a      	add	r2, r1
 8004f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f0c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004f0e:	9a08      	ldr	r2, [sp, #32]
 8004f10:	440a      	add	r2, r1
 8004f12:	9208      	str	r2, [sp, #32]
 8004f14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004f16:	9a07      	ldr	r2, [sp, #28]
 8004f18:	440a      	add	r2, r1
 8004f1a:	9207      	str	r2, [sp, #28]
 8004f1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f20:	f108 0801 	add.w	r8, r8, #1
 8004f24:	3208      	adds	r2, #8
 8004f26:	4588      	cmp	r8, r1
 8004f28:	920a      	str	r2, [sp, #40]	; 0x28
 8004f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f2c:	f47f ae75 	bne.w	8004c1a <arm_radix8_butterfly_f32+0x296>
 8004f30:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	46c3      	mov	fp, r8
 8004f38:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8004f3c:	e532      	b.n	80049a4 <arm_radix8_butterfly_f32+0x20>
 8004f3e:	b01d      	add	sp, #116	; 0x74
 8004f40:	ecbd 8b10 	vpop	{d8-d15}
 8004f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f48 <__errno>:
 8004f48:	4b01      	ldr	r3, [pc, #4]	; (8004f50 <__errno+0x8>)
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	2000000c 	.word	0x2000000c

08004f54 <__libc_init_array>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	4d0d      	ldr	r5, [pc, #52]	; (8004f8c <__libc_init_array+0x38>)
 8004f58:	4c0d      	ldr	r4, [pc, #52]	; (8004f90 <__libc_init_array+0x3c>)
 8004f5a:	1b64      	subs	r4, r4, r5
 8004f5c:	10a4      	asrs	r4, r4, #2
 8004f5e:	2600      	movs	r6, #0
 8004f60:	42a6      	cmp	r6, r4
 8004f62:	d109      	bne.n	8004f78 <__libc_init_array+0x24>
 8004f64:	4d0b      	ldr	r5, [pc, #44]	; (8004f94 <__libc_init_array+0x40>)
 8004f66:	4c0c      	ldr	r4, [pc, #48]	; (8004f98 <__libc_init_array+0x44>)
 8004f68:	f000 f9be 	bl	80052e8 <_init>
 8004f6c:	1b64      	subs	r4, r4, r5
 8004f6e:	10a4      	asrs	r4, r4, #2
 8004f70:	2600      	movs	r6, #0
 8004f72:	42a6      	cmp	r6, r4
 8004f74:	d105      	bne.n	8004f82 <__libc_init_array+0x2e>
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7c:	4798      	blx	r3
 8004f7e:	3601      	adds	r6, #1
 8004f80:	e7ee      	b.n	8004f60 <__libc_init_array+0xc>
 8004f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f86:	4798      	blx	r3
 8004f88:	3601      	adds	r6, #1
 8004f8a:	e7f2      	b.n	8004f72 <__libc_init_array+0x1e>
 8004f8c:	08018784 	.word	0x08018784
 8004f90:	08018784 	.word	0x08018784
 8004f94:	08018784 	.word	0x08018784
 8004f98:	08018788 	.word	0x08018788

08004f9c <memset>:
 8004f9c:	4402      	add	r2, r0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d100      	bne.n	8004fa6 <memset+0xa>
 8004fa4:	4770      	bx	lr
 8004fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8004faa:	e7f9      	b.n	8004fa0 <memset+0x4>

08004fac <log10f>:
 8004fac:	b508      	push	{r3, lr}
 8004fae:	ed2d 8b02 	vpush	{d8}
 8004fb2:	eeb0 8a40 	vmov.f32	s16, s0
 8004fb6:	f000 f845 	bl	8005044 <__ieee754_log10f>
 8004fba:	eeb4 8a48 	vcmp.f32	s16, s16
 8004fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc2:	d60f      	bvs.n	8004fe4 <log10f+0x38>
 8004fc4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fcc:	d80a      	bhi.n	8004fe4 <log10f+0x38>
 8004fce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd6:	d108      	bne.n	8004fea <log10f+0x3e>
 8004fd8:	f7ff ffb6 	bl	8004f48 <__errno>
 8004fdc:	2322      	movs	r3, #34	; 0x22
 8004fde:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8005000 <log10f+0x54>
 8004fe2:	6003      	str	r3, [r0, #0]
 8004fe4:	ecbd 8b02 	vpop	{d8}
 8004fe8:	bd08      	pop	{r3, pc}
 8004fea:	f7ff ffad 	bl	8004f48 <__errno>
 8004fee:	ecbd 8b02 	vpop	{d8}
 8004ff2:	2321      	movs	r3, #33	; 0x21
 8004ff4:	6003      	str	r3, [r0, #0]
 8004ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004ffa:	4802      	ldr	r0, [pc, #8]	; (8005004 <log10f+0x58>)
 8004ffc:	f000 b87e 	b.w	80050fc <nanf>
 8005000:	ff800000 	.word	0xff800000
 8005004:	08018778 	.word	0x08018778

08005008 <sqrtf>:
 8005008:	b508      	push	{r3, lr}
 800500a:	ed2d 8b02 	vpush	{d8}
 800500e:	eeb0 8a40 	vmov.f32	s16, s0
 8005012:	f000 f86f 	bl	80050f4 <__ieee754_sqrtf>
 8005016:	eeb4 8a48 	vcmp.f32	s16, s16
 800501a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501e:	d60c      	bvs.n	800503a <sqrtf+0x32>
 8005020:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005040 <sqrtf+0x38>
 8005024:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502c:	d505      	bpl.n	800503a <sqrtf+0x32>
 800502e:	f7ff ff8b 	bl	8004f48 <__errno>
 8005032:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005036:	2321      	movs	r3, #33	; 0x21
 8005038:	6003      	str	r3, [r0, #0]
 800503a:	ecbd 8b02 	vpop	{d8}
 800503e:	bd08      	pop	{r3, pc}
 8005040:	00000000 	.word	0x00000000

08005044 <__ieee754_log10f>:
 8005044:	b508      	push	{r3, lr}
 8005046:	ee10 2a10 	vmov	r2, s0
 800504a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800504e:	ed2d 8b02 	vpush	{d8}
 8005052:	d108      	bne.n	8005066 <__ieee754_log10f+0x22>
 8005054:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80050dc <__ieee754_log10f+0x98>
 8005058:	eddf 7a21 	vldr	s15, [pc, #132]	; 80050e0 <__ieee754_log10f+0x9c>
 800505c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8005060:	ecbd 8b02 	vpop	{d8}
 8005064:	bd08      	pop	{r3, pc}
 8005066:	2a00      	cmp	r2, #0
 8005068:	da02      	bge.n	8005070 <__ieee754_log10f+0x2c>
 800506a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800506e:	e7f3      	b.n	8005058 <__ieee754_log10f+0x14>
 8005070:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005074:	db02      	blt.n	800507c <__ieee754_log10f+0x38>
 8005076:	ee30 0a00 	vadd.f32	s0, s0, s0
 800507a:	e7f1      	b.n	8005060 <__ieee754_log10f+0x1c>
 800507c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005080:	bfbf      	itttt	lt
 8005082:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80050e4 <__ieee754_log10f+0xa0>
 8005086:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800508a:	f06f 0118 	mvnlt.w	r1, #24
 800508e:	ee17 2a90 	vmovlt	r2, s15
 8005092:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8005096:	bfa8      	it	ge
 8005098:	2100      	movge	r1, #0
 800509a:	3b7f      	subs	r3, #127	; 0x7f
 800509c:	440b      	add	r3, r1
 800509e:	0fd9      	lsrs	r1, r3, #31
 80050a0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80050a4:	ee07 3a90 	vmov	s15, r3
 80050a8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80050ac:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80050b0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80050b4:	ee00 3a10 	vmov	s0, r3
 80050b8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80050bc:	f000 f824 	bl	8005108 <__ieee754_logf>
 80050c0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80050e8 <__ieee754_log10f+0xa4>
 80050c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80050c8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80050ec <__ieee754_log10f+0xa8>
 80050cc:	eea8 0a27 	vfma.f32	s0, s16, s15
 80050d0:	eddf 7a07 	vldr	s15, [pc, #28]	; 80050f0 <__ieee754_log10f+0xac>
 80050d4:	eea8 0a27 	vfma.f32	s0, s16, s15
 80050d8:	e7c2      	b.n	8005060 <__ieee754_log10f+0x1c>
 80050da:	bf00      	nop
 80050dc:	cc000000 	.word	0xcc000000
 80050e0:	00000000 	.word	0x00000000
 80050e4:	4c000000 	.word	0x4c000000
 80050e8:	3ede5bd9 	.word	0x3ede5bd9
 80050ec:	355427db 	.word	0x355427db
 80050f0:	3e9a2080 	.word	0x3e9a2080

080050f4 <__ieee754_sqrtf>:
 80050f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80050f8:	4770      	bx	lr
	...

080050fc <nanf>:
 80050fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005104 <nanf+0x8>
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	7fc00000 	.word	0x7fc00000

08005108 <__ieee754_logf>:
 8005108:	ee10 3a10 	vmov	r3, s0
 800510c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005110:	d106      	bne.n	8005120 <__ieee754_logf+0x18>
 8005112:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80052a8 <__ieee754_logf+0x1a0>
 8005116:	eddf 7a65 	vldr	s15, [pc, #404]	; 80052ac <__ieee754_logf+0x1a4>
 800511a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800511e:	4770      	bx	lr
 8005120:	2b00      	cmp	r3, #0
 8005122:	da02      	bge.n	800512a <__ieee754_logf+0x22>
 8005124:	ee30 7a40 	vsub.f32	s14, s0, s0
 8005128:	e7f5      	b.n	8005116 <__ieee754_logf+0xe>
 800512a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800512e:	db02      	blt.n	8005136 <__ieee754_logf+0x2e>
 8005130:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005134:	4770      	bx	lr
 8005136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800513a:	bfb8      	it	lt
 800513c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80052b0 <__ieee754_logf+0x1a8>
 8005140:	485c      	ldr	r0, [pc, #368]	; (80052b4 <__ieee754_logf+0x1ac>)
 8005142:	bfbe      	ittt	lt
 8005144:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005148:	f06f 0118 	mvnlt.w	r1, #24
 800514c:	ee17 3a90 	vmovlt	r3, s15
 8005150:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8005154:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005158:	4418      	add	r0, r3
 800515a:	bfa8      	it	ge
 800515c:	2100      	movge	r1, #0
 800515e:	3a7f      	subs	r2, #127	; 0x7f
 8005160:	440a      	add	r2, r1
 8005162:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8005166:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800516a:	4319      	orrs	r1, r3
 800516c:	ee00 1a10 	vmov	s0, r1
 8005170:	4951      	ldr	r1, [pc, #324]	; (80052b8 <__ieee754_logf+0x1b0>)
 8005172:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8005176:	f103 000f 	add.w	r0, r3, #15
 800517a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800517e:	4001      	ands	r1, r0
 8005180:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005184:	bb89      	cbnz	r1, 80051ea <__ieee754_logf+0xe2>
 8005186:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	d10f      	bne.n	80051b0 <__ieee754_logf+0xa8>
 8005190:	2a00      	cmp	r2, #0
 8005192:	f000 8085 	beq.w	80052a0 <__ieee754_logf+0x198>
 8005196:	ee07 2a90 	vmov	s15, r2
 800519a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80052bc <__ieee754_logf+0x1b4>
 800519e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80052c0 <__ieee754_logf+0x1b8>
 80051a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80051aa:	eea7 0a87 	vfma.f32	s0, s15, s14
 80051ae:	4770      	bx	lr
 80051b0:	eddf 6a44 	vldr	s13, [pc, #272]	; 80052c4 <__ieee754_logf+0x1bc>
 80051b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80051b8:	eee0 7a66 	vfms.f32	s15, s0, s13
 80051bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80051c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051c4:	b912      	cbnz	r2, 80051cc <__ieee754_logf+0xc4>
 80051c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80051ca:	4770      	bx	lr
 80051cc:	ee07 2a90 	vmov	s15, r2
 80051d0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80052bc <__ieee754_logf+0x1b4>
 80051d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051d8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80051dc:	ee37 0a40 	vsub.f32	s0, s14, s0
 80051e0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80052c0 <__ieee754_logf+0x1b8>
 80051e4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80051e8:	4770      	bx	lr
 80051ea:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80051ee:	ee70 7a27 	vadd.f32	s15, s0, s15
 80051f2:	eddf 5a35 	vldr	s11, [pc, #212]	; 80052c8 <__ieee754_logf+0x1c0>
 80051f6:	eddf 4a35 	vldr	s9, [pc, #212]	; 80052cc <__ieee754_logf+0x1c4>
 80051fa:	4935      	ldr	r1, [pc, #212]	; (80052d0 <__ieee754_logf+0x1c8>)
 80051fc:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8005200:	4419      	add	r1, r3
 8005202:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8005206:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800520a:	430b      	orrs	r3, r1
 800520c:	2b00      	cmp	r3, #0
 800520e:	ee07 2a90 	vmov	s15, r2
 8005212:	ee26 5a06 	vmul.f32	s10, s12, s12
 8005216:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800521a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800521e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80052d4 <__ieee754_logf+0x1cc>
 8005222:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005226:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80052d8 <__ieee754_logf+0x1d0>
 800522a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800522e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80052dc <__ieee754_logf+0x1d4>
 8005232:	eee7 7a24 	vfma.f32	s15, s14, s9
 8005236:	eddf 4a2a 	vldr	s9, [pc, #168]	; 80052e0 <__ieee754_logf+0x1d8>
 800523a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800523e:	eddf 7a29 	vldr	s15, [pc, #164]	; 80052e4 <__ieee754_logf+0x1dc>
 8005242:	eee4 7a87 	vfma.f32	s15, s9, s14
 8005246:	ee67 7a85 	vmul.f32	s15, s15, s10
 800524a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800524e:	dd1c      	ble.n	800528a <__ieee754_logf+0x182>
 8005250:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005254:	ee20 7a07 	vmul.f32	s14, s0, s14
 8005258:	ee27 7a00 	vmul.f32	s14, s14, s0
 800525c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005260:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005264:	b922      	cbnz	r2, 8005270 <__ieee754_logf+0x168>
 8005266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800526a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800526e:	4770      	bx	lr
 8005270:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80052bc <__ieee754_logf+0x1b4>
 8005274:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800527c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005280:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80052c0 <__ieee754_logf+0x1b8>
 8005284:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8005288:	4770      	bx	lr
 800528a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800528e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005292:	2a00      	cmp	r2, #0
 8005294:	d0e9      	beq.n	800526a <__ieee754_logf+0x162>
 8005296:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80052bc <__ieee754_logf+0x1b4>
 800529a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800529e:	e7ed      	b.n	800527c <__ieee754_logf+0x174>
 80052a0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80052ac <__ieee754_logf+0x1a4>
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	cc000000 	.word	0xcc000000
 80052ac:	00000000 	.word	0x00000000
 80052b0:	4c000000 	.word	0x4c000000
 80052b4:	004afb20 	.word	0x004afb20
 80052b8:	007ffff0 	.word	0x007ffff0
 80052bc:	3717f7d1 	.word	0x3717f7d1
 80052c0:	3f317180 	.word	0x3f317180
 80052c4:	3eaaaaab 	.word	0x3eaaaaab
 80052c8:	3e1cd04f 	.word	0x3e1cd04f
 80052cc:	3e178897 	.word	0x3e178897
 80052d0:	ffcf5c30 	.word	0xffcf5c30
 80052d4:	3e638e29 	.word	0x3e638e29
 80052d8:	3ecccccd 	.word	0x3ecccccd
 80052dc:	3e3a3325 	.word	0x3e3a3325
 80052e0:	3e924925 	.word	0x3e924925
 80052e4:	3f2aaaab 	.word	0x3f2aaaab

080052e8 <_init>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	bf00      	nop
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr

080052f4 <_fini>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	bf00      	nop
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr
